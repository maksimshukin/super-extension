console.log('[SUPER-HOVER] –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç dbmHoverArchitect...');
console.log('[SUPER-HOVER] –ö–æ–Ω—Ç–µ–∫—Å—Ç window:', window === top.window ? '–æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ' : 'iframe/–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π');
   const dbmHoverArchitect = {
        // --- STATE ---
        isSelectionMode: false,
        isReselectMode: false,
        highlightedElement: null,
        pinnedElement: null,
        activeParentSelector: null, // The selector for the element being edited
            activeKey: 'parent',         // The specific layer being edited ('parent', 'child:.class', '_has:0')
            allEffects: {},                 // All stored effects, keyed by parent selector
        userPresets: [],
        hasUnsavedChanges: false,
        useBlockPrefix: true,
        // --- UI ELEMENTS ---
        els: {},
        // --- CONSTANTS ---
        STORAGE_KEY: 'hoverArchitectUserPresets_v5',
        PANEL_WIDTH_KEY: 'hoverArchitectPanelWidth',
            //    DEFAULT_PRESETS: {
            //        "–ü–ª–∞–≤–Ω—ã–π –ø–æ–¥—ä–µ–º": {
            //            effects: {
            //                parent: {
            //                    transformEnabled: true,
            //                    translateY: -10,
            //                    boxShadowEnabled: true,
            //                    boxShadowY: 20,
            //                    boxShadowBlur: 30,
            //                    boxShadowSpread: -10,
            //                    boxShadowColor: "rgba(0,0,0,0.15)",
            //                    duration: 300,
            //                    easing: 'ease-out'
            //                }
            //            }
            //        },
            //        "–°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏": {
            //            effects: {
            //                parent: {
            //                    duration: 250,
            //                    easing: 'ease-in-out'
            //                },
            //                children: {
            //                    '.t-descr': {
            //                        textEnabled: true,
            //                        color: '#007bff',
            //                        duration: 250,
            //                        easing: 'ease-in-out'
            //                    }
            //                }
            //            }
            //        }
            //    },    

// ‚úÖ –ó–ê–ú–ï–ù–ò –°–í–û–ô –û–ë–™–ï–ö–¢ DEFAULT_PRESETS –ù–ê –≠–¢–û–¢
                DEFAULT_PRESETS: {
                    "–ü–ª–∞–≤–Ω—ã–π –ø–æ–¥—ä–µ–º": {
        // –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è –û–î–ù–û–ì–û —Å–ª–æ—è
        styles: {
                                transformEnabled: true,
                                translateY: -10,
                                boxShadowEnabled: true,
                                boxShadowY: 20,
                                boxShadowBlur: 30,
                                boxShadowSpread: -10,
                                boxShadowColor: "rgba(0,0,0,0.15)",
            animationEnabled: true,
                                duration: 300,
                                easing: 'ease-out'
                        }
                    },
                    "–°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏": {
        styles: {
                                    textEnabled: true,
                                    color: '#007bff',
            animationEnabled: true,
                                    duration: 250,
                                    easing: 'ease-in-out'
                                }
    },
    "–õ–µ–≥–∫–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —Å —Ç–µ–Ω—å—é": {
        styles: {
            transformEnabled: true,
            scaleX: 1.05,
            scaleY: 1.05,
            boxShadowEnabled: true,
            boxShadowY: 15,
            boxShadowBlur: 25,
            boxShadowSpread: -5,
            boxShadowColor: "rgba(0,0,0,0.1)",
            animationEnabled: true,
            duration: 250,
            easing: 'ease-out'
        }
    }
},
        // --- HTML TEMPLATES ---
        dbmGetPanelHTML() {
            return `
                <div id="dbm-hover-content">
                    <div id="dbm-manager-view">
                        <div id="dbm-manager-header" class="dbm-subsection-header" style="display: none;">
                            <h3>–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</h3>
                    </div>
                        <div id="dbm-effects-list"></div>
    </div>
                    <div id="dbm-editor-view" class="hidden">
<div class="dbm-subsection">
                            <h3 class="dbm-layers-title">–°–ª–æ–∏ –∞–Ω–∏–º–∞—Ü–∏–∏</h3>
                            <div id="dbm-elements-tabs"></div>
                            <div id="dbm-elements-tabs-actions">
                    
                                <button id="dbm-add-child-btn" class="dbm-btn dbm-btn-secondary  dbm-btn-sm">–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç${window.SuperSelectionManager?.ICONS?.add || ''}</button>
                                <button id="dbm-add-has-btn" class="dbm-btn dbm-btn-secondary dbm-btn-sm">–≠—Ñ—Ñ–µ–∫—Ç :has ${window.SuperSelectionManager?.ICONS?.magic || ''}</button>
    </div>
</div>
                        <div class="dbm-subsection">
                            <div id="dbm-preset-indicator-container"></div>
                            <div class="dbm-subsection-header">
                                <h3>–°–≤–æ–π—Å—Ç–≤–∞</h3>
                                <div class="dbm-subsection-actions">
                                    
                                     <button id="dbm-ai-helper-btn" class="dbm-btn dbm-btn-secondary dbm-btn-sm">AI ${window.SuperSelectionManager?.ICONS?.ai || ''}</button>
                                     <button id="dbm-open-presets-btn" class="dbm-btn dbm-btn-secondary dbm-btn-sm">–ü—Ä–µ—Å–µ—Ç—ã ${window.SuperSelectionManager?.ICONS?.palette || ''}</button>
                                     <button id="dbm-create-preset-btn" class="dbm-btn-sm dbm-btn-icon dbm-btn-secondary" title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π">${window.SuperSelectionManager?.ICONS?.savePreset || ''}</button>
</div>
                        </div>
                            <div id="dbm-controls-container"></div>
                    </div>
                </div>
            `;
        },
        
        dbmGetFooterHTML() {
            return `
                <button id="dbm-copy-code-btn" class="dbm-btn-icon dbm-btn-secondary" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å CSS">${window.SuperSelectionManager?.ICONS?.copyCode || 'üìã'}</button>
                <button id="dbm-add-new-effect-btn" class="dbm-btn dbm-btn-primary">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç</button>
            `;
        },
        
dbmGetControlsHTML() {
        const groups = [
        { name: 'animation', title: '–ê–Ω–∏–º–∞—Ü–∏—è' },
        { name: 'transform', title: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è' },
        { name: 'style', title: '–§–æ–Ω' },
        { name: 'text', title: '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞' },
        { name: 'marginPadding', title: '–û—Ç—Å—Ç—É–ø—ã' },
        { name: 'border', title: '–ì—Ä–∞–Ω–∏—Ü—ã –∏ —É–≥–ª—ã' },
        { name: 'boxShadow', title: '–¢–µ–Ω—å' },
        { name: 'filter', title: '–§–∏–ª—å—Ç—Ä—ã'},
        ];
            return `
            <div class="dbm-subsection">
                
                <div class="dbm-controls-grid">
                    ${groups.map(g => `
                        <div class="dbm-property-group-card" data-group-name="${g.name}">
                            <div class="dbm-card-header">
                                <h4>${g.title}</h4>
                            </div>
                            <p class="dbm-card-effect-count">0 —ç—Ñ—Ñ–µ–∫—Ç–æ–≤</p>
                            <label class="dbm-switch"><input type="checkbox" data-switch="${g.name}"><span class="dbm-slider"></span></label>
                        </div>
                    `).join('')}
                </div>
            </div>`;
        },
        // --- INITIALIZATION ---
        dbmInit() {
            console.log('[SUPER-HOVER] dbmInit() –≤—ã–∑–≤–∞–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            if (typeof window.SuperPanelManager === 'undefined') {
                console.error('[SUPER-HOVER] ‚ùå SuperPanelManager –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            if (typeof window.SuperSelectionManager === 'undefined') {
                console.error('[SUPER-HOVER] ‚ùå SuperSelectionManager –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            console.log('[SUPER-HOVER] ‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏
            window.SuperPanelManager.setSolutionTitle('Super Hover');
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É useBlockPrefix —Å SuperSelectionManager
            window.SuperSelectionManager.useBlockPrefix = this.useBlockPrefix;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–Ω–µ–ª—å –æ—Ç SuperPanelManager –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π
            this.els.panel = document.getElementById('dbm-editor-panel');
            if (!this.els.panel) {
                console.error('[SUPER-HOVER] ‚ùå –ü–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if (!document.getElementById('dbm-inspector-tooltip')) {
                const inspector = document.createElement('div');
                inspector.id = 'dbm-inspector-tooltip';
                document.body.appendChild(inspector);
            }
            
            if (!document.getElementById('dbm-dynamic-hover-styles')) {
                const styles = document.createElement('style');
                styles.id = 'dbm-dynamic-hover-styles';
                document.head.appendChild(styles);
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º SuperPanelManager –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            this.els.inspector = document.getElementById('dbm-inspector-tooltip');
            this.els.dynamicStyles = document.getElementById('dbm-dynamic-hover-styles');
            
            window.SuperPanelManager.setContent(this.dbmGetPanelHTML());
            window.SuperPanelManager.setFooter(this.dbmGetFooterHTML());
            window.SuperPanelManager.open();
            
            // –ö—ç—à–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
            this.els.panel = window.SuperPanelManager.contentContainer;
            
            Object.assign(this.els, {
                managerView: document.getElementById('dbm-manager-view'),
                editorView: document.getElementById('dbm-editor-view'),
                effectsList: document.getElementById('dbm-effects-list'),
                elementsTabs: document.getElementById('dbm-elements-tabs'),
                addNewBtn: document.getElementById('dbm-add-new-effect-btn'),
                footer: window.SuperPanelManager.footerContainer,
                copyCodeBtn: document.getElementById('dbm-copy-code-btn'),
                closePanelBtn: document.getElementById('dbm-close-panel-btn'),
                createPresetBtn: document.getElementById('dbm-create-preset-btn'),
                panelOverlay: window.SuperPanelManager.overlay,
                resizeHandle: document.getElementById('dbm-panel-resize-handle'),
                presetIndicatorContainer: document.getElementById('dbm-preset-indicator-container'),
                backToManagerBtn: document.getElementById('dbm-back-to-manager-btn')
            });
            
            const savedWidth = localStorage.getItem(this.PANEL_WIDTH_KEY);
            if (savedWidth) {
                this.els.panel.style.width = savedWidth;
            }

            this.loadUserPresets();
            this.dbmInitEventListeners();
            this.dbmAddBackButtonListener();
            this.dbmShowManagerView();
        },
        
        dbmAddBackButtonListener() {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            document.addEventListener('dbmPanelBack', (e) => {
                console.log('[SUPER-HOVER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                if (!this.els.managerView.classList.contains('hidden')) {
                    // –ú—ã —É–∂–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    return;
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                this.dbmShowManagerView();
            });
        },
        
        dbmInitEventListeners() {
            if (this.els.addNewBtn) {
            this.els.addNewBtn.addEventListener('click', () => this.startSelectionMode());
            }
        
            const copyCodeBtn = document.getElementById('dbm-copy-code-btn');
            if (copyCodeBtn) {
                copyCodeBtn.addEventListener('click', () => this.copyCSS());
            }
        
            if (this.els.closePanelBtn) {
                this.els.closePanelBtn.addEventListener('click', () => {
                    this.els.panel.classList.add('collapsed');
                });
            }
            
            if (this.els.panelToggle) {
                this.els.panelToggle.addEventListener('click', () => {
                     this.els.panel.classList.remove('collapsed');
                });
            }
            
            if (this.els.createPresetBtn) {
            this.els.createPresetBtn.addEventListener('click', () => this.showCreatePresetModal());
            }

            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mousemove –∏ click, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±–æ—Ä —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ SuperSelectionManager
            // document.body.addEventListener('mousemove', e => this.handleMouseMove(e));
            // document.body.addEventListener('click', e => this.handleBodyClick(e), true);
            document.body.addEventListener('keydown', e => {
                if (e.key === 'Escape') {
                    if (this.isSelectionMode) this.endSelectionMode(true);
                    this.removeModal();
                }
            }, true);

            const resizePanel = (e) => {
                const newWidth = window.innerWidth - e.clientX;
                if (newWidth > 380 && newWidth < 800) {
                    this.els.panel.style.width = `${newWidth}px`;
                }
            };
            const stopResize = () => {
                document.body.style.cursor = 'default';
                window.removeEventListener('mousemove', resizePanel);
                window.removeEventListener('mouseup', stopResize);
                localStorage.setItem(this.PANEL_WIDTH_KEY, this.els.panel.style.width);
            };
            if (this.els.resizeHandle) {
            this.els.resizeHandle.addEventListener('mousedown', (e) => {
                e.preventDefault();
                document.body.style.cursor = 'col-resize';
                window.addEventListener('mousemove', resizePanel);
                window.addEventListener('mouseup', stopResize);
            });
            }
        },
        
        dbmShowManagerView() {
            if (this.els.backToManagerBtn) {
                this.els.backToManagerBtn.classList.remove('visible');
                this.els.backToManagerBtn.onclick = null;
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ SuperPanelManager –∏ –æ—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (window.SuperPanelManager) {
                window.SuperPanelManager.hideBackButton();
                window.SuperPanelManager.setHeader(''); // –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–∫—Ä–∞–Ω–µ
            }
            
            this.activeParentSelector = null;
            this.els.managerView.classList.remove('hidden');
            this.els.editorView.classList.add('hidden');
            this.els.footer.style.display = 'flex'; 
            this.updateManagerList();
            this.clearAllOverlays();
            this.generateAndApplyCSS();
            this.updateDynamicButtons(); 
        },
        dbmShowEditorView(selector, options = {}) {
            if (this.els.backToManagerBtn) {
                this.els.backToManagerBtn.classList.add('visible');
                this.els.backToManagerBtn.onclick = () => this.dbmShowManagerView();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ SuperPanelManager
            if (window.SuperPanelManager) {
                window.SuperPanelManager.showBackButton();
            }
        
    this.els.panel.classList.remove('collapsed');
    const { isPresetEdit = false, presetName = '' } = options;
    this.activeParentSelector = selector;
    this.activeKey = 'parent'; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º activeKey
    this.hasUnsavedChanges = false;
            this.dbmUpdateHeader(selector, !isPresetEdit, presetName);
    this.els.managerView.classList.add('hidden');
    this.els.editorView.classList.remove('hidden');
            this.els.footer.style.display = 'flex';
            
            document.getElementById('dbm-open-presets-btn').onclick = () => this.showPresetsManagerModal({ context: 'apply' });
            document.getElementById('dbm-ai-helper-btn').onclick = () => this.showAIAssistantModal();
            if(this.els.createPresetBtn) {
                this.els.createPresetBtn.onclick = () => this.showCreatePresetModal();
            }

    if (isPresetEdit) {
        this.hasUnsavedChanges = true;
                // this.updatePresetButtonVisibility(); // <- –°—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤
                document.getElementById('dbm-open-presets-btn').style.display = 'none';
    } else {
                // this.updatePresetButtonVisibility(); // <- –°—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤
                document.getElementById('dbm-open-presets-btn').style.display = 'inline-flex';
        this.updatePresetIndicatorUI();
    }

    const parentNode = document.querySelector(selector);
    if (parentNode || isPresetEdit) {
        this.buildEffectTree(parentNode);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π tab –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
        const targetTab = this.determineActiveTab(selector);
        console.log('[SUPER-HOVER] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π tab:', targetTab);
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π tab
        setTimeout(() => {
            const tabElement = this.els.elementsTabs.querySelector(`[data-key="${targetTab}"]`);
            if (tabElement) {
                this.activeKey = targetTab;
                tabElement.click();
                console.log('[SUPER-HOVER] –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω tab:', targetTab);
            } else {
                // Fallback –Ω–∞ parent tab
        this.els.elementsTabs.querySelector('[data-key="parent"]')?.click();
                console.log('[SUPER-HOVER] Fallback –Ω–∞ parent tab');
    }
        }, 10);
    }

            this.updateDynamicButtons(); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        },
        dbmUpdateHeader(title, isEditor = false, subtitle = '') {
    const blockInfo = this.getBlockInfo(title);
    const cleanedTitle = this.cleanSelectorForDisplay(title);
            const titleText = isEditor ? (cleanedTitle || '–†–µ–¥–∞–∫—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤') : '';
        
            // ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è backButton –∏ –µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –æ—Ç—Å—é–¥–∞
        
            const effectState = this.allEffects[this.activeParentSelector] || {};
            const isMobileDisabled = effectState.disableOnMobile === undefined ? true : effectState.disableOnMobile;
        
            const controlsHTML = isEditor ? `
                <div class="dbm-editor-controls">
                    <div class="dbm-editor-control-row">
                <span>–î–æ–±–∞–≤–ª—è—Ç—å ID / –∫–ª–∞—Å—Å –±–ª–æ–∫–∞</span>
                        <label class="dbm-switch as-label">
                            <input type="checkbox" id="dbm-prefix-toggle-checkbox" ${this.useBlockPrefix ? 'checked' : ''}>
                            <span class="dbm-slider"></span>
            </label>
                    </div>
                    <div class="dbm-editor-control-row">
                        <span>–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö</span>
                        <label class="dbm-switch as-label">
                            <input type="checkbox" id="dbm-mobile-disable-checkbox" ${isMobileDisabled ? 'checked' : ''}>
                            <span class="dbm-slider"></span>
                        </label>
                    </div>
        </div>` : '';

    const headerHTML = `
                <div class="dbm-header-main-row">
                    <div class="dbm-header-title-group">
                        <div class="dbm-header-title-text">
                            ${blockInfo ? `<div class="dbm-block-info" title="${blockInfo.title}">${blockInfo.cod} | ${blockInfo.title}</div>` : ''}
                            ${subtitle ? `<div class="dbm-block-info">–ü—Ä–µ—Å–µ—Ç: <strong>${subtitle}</strong></div>` : ''}
                            ${isEditor ? `<h2 id="dbm-editable-selector-title" title="${title}">${titleText}</h2>` : ''}
                    </div>
                </div>
                ${controlsHTML}
    `;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SuperPanelManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if (window.SuperPanelManager) {
        window.SuperPanelManager.setHeader(headerHTML);
    }
    
    if (isEditor) {
                const h2Element = document.querySelector('#dbm-editable-selector-title');
        this.makeSelectorEditable(h2Element);

                document.getElementById('dbm-prefix-toggle-checkbox').addEventListener('change', (e) => {
            this.useBlockPrefix = e.target.checked;
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å SuperSelectionManager
            if (window.SuperSelectionManager) {
                window.SuperSelectionManager.useBlockPrefix = e.target.checked;
            }
            const oldSelector = this.activeParentSelector;
            const element = document.querySelector(oldSelector);
            if (element) {
                const newSelector = this.getUniqueSelector(element);
                if (newSelector && newSelector !== oldSelector) {
                    this.allEffects[newSelector] = this.allEffects[oldSelector];
                    delete this.allEffects[oldSelector];
                            this.dbmShowEditorView(newSelector);
                }
            }
        });
                
                document.getElementById('dbm-mobile-disable-checkbox').addEventListener('change', (e) => {
                    if (this.allEffects[this.activeParentSelector]) {
                        this.allEffects[this.activeParentSelector].disableOnMobile = e.target.checked;
                        this.generateAndApplyCSS();
    }
                });
            }
},
        dbmUpdateState(key, prop, value) {
    const effects = this.allEffects[this.activeParentSelector];
    if (!effects) return;

            const targetState = this._getStateObjectRef(key);
            if (!targetState) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞:", key);
                return;
            }
        
            if (targetState._appliedPreset) {
                delete targetState._appliedPreset;
                if (key === this.activeKey) {
        this.updatePresetIndicatorUI();
                }
    }

    if (!this.activeParentSelector.startsWith('__PRESET_EDIT_MODE__')) {
        this.hasUnsavedChanges = true;
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π
                this.updateDynamicButtons();
            }
        
        targetState[prop] = value;

    this.generateAndApplyCSS();
    this.updateEffectCountInCards();
},

// –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ updatePresetIndicatorUI –ù–ê –≠–¢–£
updatePresetIndicatorUI() {
   // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ê–ö–¢–ò–í–ù–û–ì–û —Å–ª–æ—è, –∞ –Ω–µ –¥–ª—è –≤—Å–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.
   const currentState = this.getCurrentStateForKey(this.activeKey);
   const container = this.els.presetIndicatorContainer;

   // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è.
   if (currentState && currentState._appliedPreset) {
       container.innerHTML = `<div id="dbm-preset-indicator"><span>–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: <strong>${currentState._appliedPreset}</strong></span><button id="dbm-reset-preset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button></div>`;
       container.querySelector('#dbm-reset-preset-btn').onclick = () => this.resetPreset();
    } else {
       container.innerHTML = '';
   }
},

resetPreset() {
   // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è.
   const targetState = this._getStateObjectRef(this.activeKey);
   if (targetState && targetState._appliedPreset) {
       // –£–¥–∞–ª—è–µ–º "—Å—Ç–∏–∫–µ—Ä" —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è.
       delete targetState._appliedPreset;
       // –û–±–Ω–æ–≤–ª—è–µ–º UI, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ–π.
       this.updatePresetIndicatorUI();
   }
},
        // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π tab –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        determineActiveTab(selectedSelector) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä (—Ä–∞–≤–µ–Ω activeParentSelector), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'parent'
            if (selectedSelector === this.activeParentSelector) {
                return 'parent';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
            const effects = this.allEffects[this.activeParentSelector];
            if (effects && effects.parent && effects.parent.children) {
                // –ò—â–µ–º —Å—Ä–µ–¥–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for (const childKey in effects.parent.children) {
                    const fullChildSelector = this.buildFullChildSelector(childKey);
                    if (fullChildSelector === selectedSelector) {
                        return `parent|child:${childKey}`;
                    }
                }
                
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                const findInChildren = (children, parentPath) => {
                    for (const childKey in children) {
                        const currentPath = `${parentPath}|child:${childKey}`;
                        const fullSelector = this.buildFullChildSelector(childKey);
                        if (fullSelector === selectedSelector) {
                            return currentPath;
                        }
                        if (children[childKey].children) {
                            const found = findInChildren(children[childKey].children, currentPath);
                            if (found) return found;
                        }
                    }
                    return null;
                };
                
                const found = findInChildren(effects.parent.children, 'parent');
                if (found) return found;
            }
            
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'parent'
            return 'parent';
        },

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        buildFullChildSelector(childKey) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            if (childKey.startsWith('.') || childKey.startsWith('[') || childKey.startsWith(':')) {
                return `${this.activeParentSelector} ${childKey}`;
            }
            return childKey;
},

        // --- SELECTION LOGIC ---
        startSelectionMode(isReselect = false) {
            console.log('[SUPER-HOVER] startSelectionMode –≤—ã–∑–≤–∞–Ω, isReselect:', isReselect);
            
            if (!window.SuperSelectionManager) {
                console.error('[SUPER-HOVER] SuperSelectionManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            this.isSelectionMode = true;
            this.isReselectMode = isReselect;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞
            window.SuperPanelManager.close();
            
            window.SuperSelectionManager.startSelection({
                onSelect: (selectedElement, selector) => {
                    console.log('[SUPER-HOVER] –≠–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω:', selectedElement, '–°–µ–ª–µ–∫—Ç–æ—Ä:', selector);
                    this.isSelectionMode = false;
                    this.finalizeSelection(selector, isReselect);
                },
                onCancel: () => {
                    console.log('[SUPER-HOVER] –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω');
                    this.isSelectionMode = false;
                    window.SuperPanelManager.open();
                },
                blacklist: ['.dbm-editor-panel', '#dbm-inspector-tooltip', '.dbm-modal-overlay', '#dbm-panel-toggle-collapsed']
            });
        },
        endSelectionMode(cancelled = false) {
            console.log('[DEBUG] endSelectionMode –≤—ã–∑–≤–∞–Ω, cancelled:', cancelled);
            
            this.isSelectionMode = false;
            this.isReselectMode = false;
            this.pinnedElement = null;
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ SuperSelectionManager —Ç–æ–∂–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É
            if (window.SuperSelectionManager && window.SuperSelectionManager.isActive) {
                window.SuperSelectionManager.endSelection();
            }
            
            if (!cancelled || this.activeParentSelector) {
                window.SuperPanelManager.open();
            }
        },
        // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleMouseMove (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–æ–≥–∏–∫–∞ –≤ SuperSelectionManager)
        handleMouseMove(e) {
            // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ SuperSelectionManager
                return;
        },
        // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleBodyClick (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–æ–≥–∏–∫–∞ –≤ SuperSelectionManager)
handleBodyClick(e) {
           console.log('[DEBUG] handleBodyClick –≤—ã–∑–≤–∞–Ω, isSelectionMode:', this.isSelectionMode);
           // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ SuperSelectionManager
           return;
        },
        
        finalizeSelection(selector, isReselect = false) {
    console.log('[SUPER-HOVER] finalizeSelection –≤—ã–∑–≤–∞–Ω —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:', selector);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Ç SuperSelectionManager
    const finalSelector = selector;
    if (!finalSelector) {
        console.error('[SUPER-HOVER] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä');
        window.SuperPanelManager.open();
        return;
    }
    
    this.isReselectMode = isReselect;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ (reselect), –º–µ–Ω—è–µ–º activeParentSelector
    if (this.isReselectMode) {
        const oldSelector = this.activeParentSelector;
        if (oldSelector && finalSelector !== oldSelector) {
            this.allEffects[finalSelector] = this.allEffects[oldSelector];
            delete this.allEffects[oldSelector];
            this.activeParentSelector = finalSelector;
            }
        } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if (!this.activeParentSelector) {
            // –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—å
            this.activeParentSelector = finalSelector;
            if (!this.allEffects[finalSelector]) {
                this.allEffects[finalSelector] = this.getDefaultEffectState();
            }
        } else {
            // –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
            if (finalSelector === this.activeParentSelector) {
                // –í—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ —Ä–æ–¥–∏—Ç–µ–ª—å - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
                console.log('[SUPER-HOVER] –í—ã–±—Ä–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç');
            } else {
                // –í—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç - –ª–∏–±–æ –Ω–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å, –ª–∏–±–æ –¥–æ—á–µ—Ä–Ω–∏–π
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                const parentElement = document.querySelector(this.activeParentSelector);
                const selectedElement = document.querySelector(finalSelector);
                
                if (parentElement && selectedElement && parentElement.contains(selectedElement)) {
                    // –≠—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ child
                    const relativeSelector = this.getRelativeSelector(selectedElement, parentElement);
                    console.log('[SUPER-HOVER] –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç:', relativeSelector);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                    const parentEffects = this.allEffects[this.activeParentSelector];
                    if (!parentEffects.parent.children) {
                        parentEffects.parent.children = {};
                    }
                    if (!parentEffects.parent.children[relativeSelector]) {
                        parentEffects.parent.children[relativeSelector] = this.getDefaultState();
                        console.log('[SUPER-HOVER] –î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:', relativeSelector);
                        console.log('[SUPER-HOVER] –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ children:', parentEffects.parent.children);
                    }
                } else {
                    // –≠—Ç–æ –Ω–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                    this.activeParentSelector = finalSelector;
                    if (!this.allEffects[finalSelector]) {
                        this.allEffects[finalSelector] = this.getDefaultEffectState();
                    }
                }
            }
        }
    }
            
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ SuperPanelManager
    window.SuperPanelManager.open();
    
    this.dbmShowEditorView(this.activeParentSelector);
    this.endSelectionMode();
    this.updateDynamicButtons(); 
},


getRelativeSelector(childElement, parentElement) {
   if (!childElement || !parentElement) {
       console.log('[DEBUG] getRelativeSelector: –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
       return '';
   }
   
   // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è –í–ê–®–£ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
   const parentSelector = this.getUniqueSelector(parentElement);
   const childSelector = this.getUniqueSelector(childElement);
   
   console.log('[DEBUG] getRelativeSelector: parentSelector:', parentSelector);
   console.log('[DEBUG] getRelativeSelector: childSelector:', childSelector);
   
   // –°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å:
   // –ü—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∑–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —á–∞—Å—Ç—å –æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
   if (childSelector.startsWith(parentSelector)) {
       const relative = childSelector.substring(parentSelector.length).trim();
       console.log('[DEBUG] getRelativeSelector: relative (startsWith):', relative);
       return relative;
   }
   
   // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –≤–ª–æ–∂–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è),
   // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é, —Å–∞–º—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —á–∞—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞.
   const fallback = childSelector.split(' ').pop();
   console.log('[DEBUG] getRelativeSelector: fallback (split):', fallback);
   return fallback;
        },

        updateHighlight(element) {
            if (this.highlightedElement === element) return;
           if (this.highlightedElement) this.highlightedElement.classList.remove('dbm-highlight-element');
            this.highlightedElement = element;
           if (this.highlightedElement) this.highlightedElement.classList.add('dbm-highlight-element');
        },
    updateInspector(element) {
        if (!element) {
            this.els.inspector.style.display = 'none';
            return;
        }
        const hierarchyHTML = this.buildSelectorHierarchyHTML(element);
        if (!hierarchyHTML) {
            this.els.inspector.style.display = 'none';
            return;
        }
        this.els.inspector.innerHTML = `
           <div class="dbm-inspector-section">
                <h4>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞</h4>
                <div>${hierarchyHTML}</div>
            </div>`;
        this.els.inspector.style.display = 'block';
        const elRect = element.getBoundingClientRect();
        const inspectorRect = this.els.inspector.getBoundingClientRect();
        const panelRect = this.els.panel.getBoundingClientRect();
        let top = elRect.bottom + 10 + window.scrollY;
        let left = elRect.left + window.scrollX;
        if (top + inspectorRect.height > window.innerHeight + window.scrollY) {
            top = elRect.top - inspectorRect.height - 10 + window.scrollY;
        }
        if (left + inspectorRect.width > window.innerWidth) {
            left = window.innerWidth - inspectorRect.width - 10;
        }
        if (left < 0) left = 10;
        if (!this.els.panel.classList.contains('collapsed') && left + inspectorRect.width > panelRect.left) {
            left = panelRect.left - inspectorRect.width - 10;
        }
        this.els.inspector.style.top = `${Math.max(0, top)}px`;
        this.els.inspector.style.left = `${Math.max(0, left)}px`;
        this.addHighlightEventListeners(this.els.inspector);
    },
        // --- SELECTOR GENERATION (REWRITTEN) ---
// –ó–ê–ú–ï–ù–ò–¢–ï getSelectorForParent –∏ getRelativeSelectorForChild –ù–ê –≠–¢–ò –î–í–ï –§–£–ù–ö–¶–ò–ò

getUniqueSelector(el) {
    if (!el || el.closest('#dbm-editor-panel')) return '';
        
            const tildaBlock = el.closest('.r.t-rec');
            if (!tildaBlock) return '';
        
            // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –±–ª–æ–∫–∞
            let blockPrefix = '';
            if (this.useBlockPrefix) {
                const customClass = Array.from(tildaBlock.classList).find(c => c.startsWith('uc-'));
                blockPrefix = customClass ? `.${customClass}` : `#${tildaBlock.id}`;
            }
        
    // 2. –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ –±–ª–æ–∫–∞
            let path = [];
            let current = el;
            while (current && current !== tildaBlock && current.parentElement) {
                const part = this.getSelectorPart(current).value;
                if (part && !path.includes(part)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    path.unshift(part);
                }
                current = current.parentElement;
            }
        
    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ
            let finalParts = [];
        
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (blockPrefix) {
                finalParts.push(blockPrefix);
            }
        
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [–ø—Ä–µ—Ñ–∏–∫—Å] .t-xxx .—Ä–æ–¥–∏—Ç–µ–ª—å .—Ü–µ–ª—å
            if (path.length >= 3) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –æ–±—â–∏–π –∫–ª–∞—Å—Å –±–ª–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, .t-cards
                const tBlock = path.find(p => p.startsWith('.t') && !p.includes('__'));
                if (tBlock) finalParts.push(tBlock);
                
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (—Ä–æ–¥–∏—Ç–µ–ª—å), –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å t-–±–ª–æ–∫–æ–º
                if (path.length > 1 && path[path.length - 2] !== tBlock) {
                    finalParts.push(path[path.length - 2]);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
                finalParts.push(path[path.length - 1]);

            } else {
                // –ï—Å–ª–∏ –ø—É—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –µ–≥–æ —á–∞—Å—Ç–∏
                path.forEach(p => finalParts.push(p));
            }

            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è
            finalParts = [...new Set(finalParts)]; 
        
            const result = finalParts.join(' ').replace(/\s+/g, ' ');
            console.log('[DEBUG] getUniqueSelector —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result, '–¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', el);
            return result;
        },

getRelativeSelector(childElement, parentElement) {
   if (!childElement || !parentElement) return '';
   const parentSelector = this.getUniqueSelector(parentElement);
   const childSelector = this.getUniqueSelector(childElement);
   
   // –ù–∞–¥–µ–∂–Ω–æ –æ—Ç—Ä–µ–∑–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —á–∞—Å—Ç—å –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
   if (childSelector.startsWith(parentSelector)) {
       const relative = childSelector.substring(parentSelector.length).trim();
       // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ. –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å.
       return relative || childSelector.split(' ').pop();
   }
   
   // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –≤–ª–æ–∂–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
   return childSelector.split(' ').pop();
},
        getSelectorPart(el) {
            if (!el || !el.tagName) return { type: 'tag', value: '' };

            const classes = Array.from(el.classList).filter(c =>
                !window.SuperSelectionManager?.CLASS_BLOCKLIST?.includes(c) &&
                !c.startsWith('t-col_') &&
                !c.startsWith('t-prefix_') &&
                !c.startsWith('t-animate')
            );

            const parentBlock = el.closest('.r.t-rec');
            const recordType = parentBlock ? parentBlock.dataset.recordType : '';

            let bestClass = null;
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ö–ª–∞—Å—Å—ã —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º (–ë–≠–ú –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
            bestClass = classes.find(c => c.includes('__'));
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ö–ª–∞—Å—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 't-' (Tilda –∫–ª–∞—Å—Å—ã)
            if (!bestClass) {
                bestClass = classes.find(c => c.startsWith('t-'));
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª–∞—Å—Å
            if (!bestClass) {
                bestClass = classes[0];
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–æ–∏—Å–∫ –ø–æ data-record-type
            if (!bestClass && recordType) {
                bestClass = classes.find(c => {
                    const parts = recordType.replace(/[0-9]/g, '').split('');
                    return parts.some(part => c.includes(part));
                });
            }

            if (bestClass) {
                return { type: 'class', value: `.${bestClass}` };
            }

            return { type: 'tag', value: el.tagName.toLowerCase() };
        },
buildSelectorHierarchyHTML(element, isModal = false) {
            if (!element) return '';
            const tildaBlock = element.closest('.r.t-rec');
            if (!tildaBlock) return '';
            // 1. –°–æ–±–∏—Ä–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            const parents = [];
            let currentParent = element.parentElement;
            while (currentParent && currentParent !== tildaBlock) {
                const selector = this.getUniqueSelector(currentParent);
                if (selector) {
                    parents.unshift({ el: currentParent, selector }); // unshift –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ
                }
                currentParent = currentParent.parentElement;
            }
            // 2. –°–æ–±–∏—Ä–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const children = [];
            const childElements = element.querySelectorAll('*');
            const childSelectors = new Set(); // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            childElements.forEach(child => {
                const selector = this.getUniqueSelector(child);
                if (selector && !childSelectors.has(selector)) {
                    childSelectors.add(selector);
                    children.push({ el: child, selector });
                }
            });
            const createTagHTML = (item, type) => {
                const { selector } = item;
                const translation = this.getTranslationForSelector(selector);
               const badge = translation ? `<span class="dbm-translation-badge">${translation}</span>` : '';
                const typeBadgeClass = type === 'target' ? 'is-target' : '';
                let typeText = '–≠–ª–µ–º–µ–Ω—Ç';
                if (type === 'parent') typeText = '–†–æ–¥–∏—Ç–µ–ª—å';
                if (type === 'child') typeText = '–î–æ—á–µ—Ä–Ω–∏–π';
               return `<div class="dbm-selector-tag ${typeBadgeClass}" data-selector="${selector.replace(/"/g, '&quot;')}">
                           <span class="dbm-element-type-badge">${typeText}</span> ${this.cleanSelectorForDisplay(selector)} ${badge}
                        </div>`;
            };
            const parentsHTML = parents.map(p => createTagHTML(p, 'parent')).join('');
            const targetHTML = createTagHTML({ el: element, selector: this.getUniqueSelector(element) }, 'target');
            const childrenHTML = children.map(c => createTagHTML(c, 'child')).join('');
            return `
               ${parents.length > 0 ? `<div class="dbm-selector-list-group">${parentsHTML}</div>` : ''}
               <div class="dbm-selector-list-group">${targetHTML}</div>
               ${children.length > 0 ? `<div class="dbm-selector-list-group">${childrenHTML}</div>` : ''}
           `;
       },
        // --- CSS GENERATION ---
 // generateAndApplyCSS() {
//             let finalCss = '';
            
//             // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª—É–∂–µ–±–Ω—ã–µ
//     const allSelectors = Object.keys(this.allEffects).filter(key => !key.startsWith('__'));

//             // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (–®–∞–≥ 1): –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-—ç—Ñ—Ñ–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–ª—é—á –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
//     if (this.allEffects['__AI_PREVIEW__']) {
//                 allSelectors.push('__AI_PREVIEW__');
//             }
        
// const getStyles = (state) => {
//                 let styles = '', transforms = [], filters = [], backdropFilters = [];
//                 if(!state) return '';
//     if (state.transformEnabled) {
//         if (state.translateX || state.translateY) transforms.push(`translate(${state.translateX || 0}px, ${state.translateY || 0}px)`);
//                     if (state.scaleX != 1 && state.scaleX !== undefined) transforms.push(`scaleX(${state.scaleX})`);
//                     if (state.scaleY != 1 && state.scaleY !== undefined) transforms.push(`scaleY(${state.scaleY})`);
//         if (state.skewX || state.skewY) transforms.push(`skew(${state.skewX || 0}deg, ${state.skewY || 0}deg)`);
//         if (state.rotateX) transforms.push(`rotateX(${state.rotateX}deg)`);
//         if (state.rotateY) transforms.push(`rotateY(${state.rotateY}deg)`);
//         if (state.rotateZ) transforms.push(`rotateZ(${state.rotateZ}deg)`);
//     }
//     if (state.filterEnabled) {
//         if (state.blur > 0) filters.push(`blur(${state.blur}px)`);
//                     if (state.brightness != 1 && state.brightness !== undefined) filters.push(`brightness(${state.brightness})`);
//                     if (state.contrast != 1 && state.contrast !== undefined) filters.push(`contrast(${state.contrast})`);
//                     if (state.saturate != 1 && state.saturate !== undefined) filters.push(`saturate(${state.saturate})`);
//         if (state.grayscale > 0) filters.push(`grayscale(${state.grayscale})`);
//         if (state.backdropBlur > 0) backdropFilters.push(`blur(${state.backdropBlur}px)`);
//     }
//     if (transforms.length) styles += `transform: ${transforms.join(' ')};`;
//     if (filters.length) styles += `filter: ${filters.join(' ')};`;
//     if (backdropFilters.length) styles += `backdrop-filter: ${backdropFilters.join(' ')}; -webkit-backdrop-filter: ${backdropFilters.join(' ')};`;
//     if (state.styleEnabled) {
//                     if (state.opacity != 1 && state.opacity !== undefined) styles += `opacity: ${state.opacity};`;
//         if (state.backgroundType === 'solid' && state.backgroundColor) {
//             styles += `background-color: ${state.backgroundColor} !important;`;
//         } else if (state.backgroundType === 'gradient') {
//             const gradType = state.gradientType === 'linear' ? 'linear-gradient' : 'radial-gradient';
//             const angle = state.gradientType === 'linear' ? `${state.gradientAngle}deg, ` : '';
//             styles += `background-image: ${gradType}(${angle}${state.gradientColor1}, ${state.gradientColor2}) !important;`;
//         }
//     }
//     if (state.boxShadowEnabled) {
//         const inset = state.boxShadowInset ? 'inset ' : '';
//         styles += `box-shadow: ${inset}${state.boxShadowX || 0}px ${state.boxShadowY || 0}px ${state.boxShadowBlur || 0}px ${state.boxShadowSpread || 0}px ${state.boxShadowColor || 'rgba(0,0,0,0.1)'};`;
//     }
//     if (state.textEnabled) {
//         if (state.color) styles += `color: ${state.color} !important;`;
//         if (state.fontSize) styles += `font-size: ${state.fontSize}px;`;
//         if (state.fontWeight) styles += `font-weight: ${state.fontWeight};`;
//         if (state.letterSpacing) styles += `letter-spacing: ${state.letterSpacing}px;`;
//         if (state.lineHeight) styles += `line-height: ${state.lineHeight};`;
//         if (state.textDecorationLine && state.textDecorationLine !== 'none') {
//             styles += `text-decoration: ${state.textDecorationLine} ${state.textDecorationStyle} ${state.textDecorationColor || 'currentColor'};`;
//         }
//     }
//     if (state.borderEnabled) {
//         if (state.borderTopLeftRadius) styles += `border-top-left-radius: ${state.borderTopLeftRadius}px;`;
//         if (state.borderTopRightRadius) styles += `border-top-right-radius: ${state.borderTopRightRadius}px;`;
//         if (state.borderBottomRightRadius) styles += `border-bottom-right-radius: ${state.borderBottomRightRadius}px;`;
//         if (state.borderBottomLeftRadius) styles += `border-bottom-left-radius: ${state.borderBottomLeftRadius}px;`;
//         if (state.borderWidth && state.borderStyle && state.borderColor) {
//             styles += `border: ${state.borderWidth}px ${state.borderStyle} ${state.borderColor};`;
//         }
//     }
//     if (state.marginPaddingEnabled) {
//         if(state.marginTop) styles += `margin-top: ${state.marginTop}px !important;`;
//         if(state.marginRight) styles += `margin-right: ${state.marginRight}px !important;`;
//         if(state.marginBottom) styles += `margin-bottom: ${state.marginBottom}px !important;`;
//         if(state.marginLeft) styles += `margin-left: ${state.marginLeft}px !important;`;
//         if(state.paddingTop) styles += `padding-top: ${state.paddingTop}px !important;`;
//         if(state.paddingRight) styles += `padding-right: ${state.paddingRight}px !important;`;
//         if(state.paddingBottom) styles += `padding-bottom: ${state.paddingBottom}px !important;`;
//         if(state.paddingLeft) styles += `padding-left: ${state.paddingLeft}px !important;`;
//     }
//     return styles;
// };
    
//     const getTransition = (state) => {
//         if (!state || !state.animationEnabled) return `transition: all 200ms ease;`;
//         let easing = state.easing || 'ease';
//         if (easing === 'custom' && state.bezier1 !== undefined) {
//             easing = `cubic-bezier(${state.bezier1 || 0}, ${state.bezier2 || 0}, ${state.bezier3 || 1}, ${state.bezier4 || 1})`;
//         }
//         return `transition: all ${state.duration || 200}ms ${easing};`;
//     };

//             allSelectors.forEach(key => {
//                 let baseSelector = key;
//                 const effect = this.allEffects[key];
        
//                 // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (–®–∞–≥ 2): –ï—Å–ª–∏ —ç—Ç–æ –∫–ª—é—á –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
//                 if (key === '__AI_PREVIEW__') {
//                     baseSelector = effect._targetSelector;
//                     if (!baseSelector) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
//                 }
                
//                 if (!effect || !effect.parent) return;
        
//                 let effectCss = ''; 
                
//                 const processState = (state, path = '') => {
//                     const fullSelector = (baseSelector + path).trim();
                    
//                     let initialStyles = getTransition(state);
//                     if (state.overflowHidden) {
//                         initialStyles += ` overflow: hidden !important;`;
//                     }
//                     if (state.perspectiveEnabled) {
//                         initialStyles += ` perspective: ${state.perspectiveValue || 1000}px;`;
//                     }
        
//                     effectCss += `${fullSelector} { ${initialStyles} }\n`;
                    
//                     const hoverStyles = getStyles(state);
//                     if (hoverStyles) {
//                         effectCss += `${baseSelector}:hover${path} { ${hoverStyles} }\n`;
//                     }
                    
//             if (state.children) {
//                         Object.keys(state.children).forEach(childKey => {
//                             const newPath = `${path} ${childKey.trim()}`;
//                             processState(state.children[childKey], newPath);
//                         });
//                     }
//                 };
                
//                 processState(effect.parent);

//         if (effect._hasEffects) {
//             effect._hasEffects.forEach(he => {
//                 const hasStyles = getStyles(he.styles);
//                 if (hasStyles) {
//                     const relativeTrigger = this.getSubtitleFromKey(he.triggerKey);
//                     const relativeTarget = he.target;
//                     const fullTargetSelector = `${baseSelector} ${relativeTarget}`;
                            
//                             let initialHasStyles = getTransition(he.styles);
//                             if (he.styles.overflowHidden) {
//                                  initialHasStyles += ` overflow: hidden !important;`;
//                             }
//                             if (he.styles.perspectiveEnabled) {
//                                 initialHasStyles += ` perspective: ${he.styles.perspectiveValue || 1000}px;`;
//                             }
                            
//                             effectCss += `${fullTargetSelector} { ${initialHasStyles} }\n`;
//                             effectCss += `${baseSelector}:has(${relativeTrigger}:hover) ${relativeTarget} { ${hasStyles} }\n`;
//                 }
//             });
//         }

//                 if (effect.disableOnMobile) {
//                     finalCss += `@media (hover:hover) {\n${effectCss}}\n`;
//                 } else {
//                     finalCss += effectCss;
//                 }
//             });
        
//             this.els.dynamicStyles.innerHTML = finalCss;
//         },

generateAndApplyCSS() {
    let finalCss = '';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª—É–∂–µ–±–Ω—ã–µ
    const allSelectors = Object.keys(this.allEffects).filter(key => !key.startsWith('__'));

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (–®–∞–≥ 1): –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π AI-—ç—Ñ—Ñ–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–ª—é—á –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (this.allEffects['__AI_PREVIEW__']) {
        allSelectors.push('__AI_PREVIEW__');
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ getStyles –∏ getTransition –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
    // –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ —è –∏—Ö –æ–ø—É—Å–∫–∞—é.
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏.
const getStyles = (state) => {
        let styles = '', transforms = [], filters = [], backdropFilters = [];
        if(!state) return '';
    if (state.transformEnabled) {
        if (state.translateX || state.translateY) transforms.push(`translate(${state.translateX || 0}px, ${state.translateY || 0}px)`);
            if (state.scaleX != 1 && state.scaleX !== undefined) transforms.push(`scaleX(${state.scaleX})`);
            if (state.scaleY != 1 && state.scaleY !== undefined) transforms.push(`scaleY(${state.scaleY})`);
        if (state.skewX || state.skewY) transforms.push(`skew(${state.skewX || 0}deg, ${state.skewY || 0}deg)`);
        if (state.rotateX) transforms.push(`rotateX(${state.rotateX}deg)`);
        if (state.rotateY) transforms.push(`rotateY(${state.rotateY}deg)`);
        if (state.rotateZ) transforms.push(`rotateZ(${state.rotateZ}deg)`);
    }
    if (state.filterEnabled) {
        if (state.blur > 0) filters.push(`blur(${state.blur}px)`);
            if (state.brightness != 1 && state.brightness !== undefined) filters.push(`brightness(${state.brightness})`);
            if (state.contrast != 1 && state.contrast !== undefined) filters.push(`contrast(${state.contrast})`);
            if (state.saturate != 1 && state.saturate !== undefined) filters.push(`saturate(${state.saturate})`);
        if (state.grayscale > 0) filters.push(`grayscale(${state.grayscale})`);
        if (state.backdropBlur > 0) backdropFilters.push(`blur(${state.backdropBlur}px)`);
    }
    if (transforms.length) styles += `transform: ${transforms.join(' ')};`;
    if (filters.length) styles += `filter: ${filters.join(' ')};`;
    if (backdropFilters.length) styles += `backdrop-filter: ${backdropFilters.join(' ')}; -webkit-backdrop-filter: ${backdropFilters.join(' ')};`;
    if (state.styleEnabled) {
            if (state.opacity != 1 && state.opacity !== undefined) styles += `opacity: ${state.opacity};`;
        if (state.backgroundType === 'solid' && state.backgroundColor) {
            styles += `background-color: ${state.backgroundColor} !important;`;
        } else if (state.backgroundType === 'gradient') {
            const gradType = state.gradientType === 'linear' ? 'linear-gradient' : 'radial-gradient';
            const angle = state.gradientType === 'linear' ? `${state.gradientAngle}deg, ` : '';
            styles += `background-image: ${gradType}(${angle}${state.gradientColor1}, ${state.gradientColor2}) !important;`;
        }
    }
    if (state.boxShadowEnabled) {
        const inset = state.boxShadowInset ? 'inset ' : '';
        styles += `box-shadow: ${inset}${state.boxShadowX || 0}px ${state.boxShadowY || 0}px ${state.boxShadowBlur || 0}px ${state.boxShadowSpread || 0}px ${state.boxShadowColor || 'rgba(0,0,0,0.1)'};`;
    }
    if (state.textEnabled) {
        if (state.color) styles += `color: ${state.color} !important;`;
        if (state.fontSize) styles += `font-size: ${state.fontSize}px;`;
        if (state.fontWeight) styles += `font-weight: ${state.fontWeight};`;
        if (state.letterSpacing) styles += `letter-spacing: ${state.letterSpacing}px;`;
        if (state.lineHeight) styles += `line-height: ${state.lineHeight};`;
        if (state.textDecorationLine && state.textDecorationLine !== 'none') {
            styles += `text-decoration: ${state.textDecorationLine} ${state.textDecorationStyle} ${state.textDecorationColor || 'currentColor'};`;
        }
    }
    if (state.borderEnabled) {
        if (state.borderTopLeftRadius) styles += `border-top-left-radius: ${state.borderTopLeftRadius}px;`;
        if (state.borderTopRightRadius) styles += `border-top-right-radius: ${state.borderTopRightRadius}px;`;
        if (state.borderBottomRightRadius) styles += `border-bottom-right-radius: ${state.borderBottomRightRadius}px;`;
        if (state.borderBottomLeftRadius) styles += `border-bottom-left-radius: ${state.borderBottomLeftRadius}px;`;
        if (state.borderWidth && state.borderStyle && state.borderColor) {
            styles += `border: ${state.borderWidth}px ${state.borderStyle} ${state.borderColor};`;
        }
    }
    if (state.marginPaddingEnabled) {
        if(state.marginTop) styles += `margin-top: ${state.marginTop}px !important;`;
        if(state.marginRight) styles += `margin-right: ${state.marginRight}px !important;`;
        if(state.marginBottom) styles += `margin-bottom: ${state.marginBottom}px !important;`;
        if(state.marginLeft) styles += `margin-left: ${state.marginLeft}px !important;`;
        if(state.paddingTop) styles += `padding-top: ${state.paddingTop}px !important;`;
        if(state.paddingRight) styles += `padding-right: ${state.paddingRight}px !important;`;
        if(state.paddingBottom) styles += `padding-bottom: ${state.paddingBottom}px !important;`;
        if(state.paddingLeft) styles += `padding-left: ${state.paddingLeft}px !important;`;
    }
    return styles;
};
    const getTransition = (state) => {
        if (!state || !state.animationEnabled) return `transition: all 200ms ease;`;
        let easing = state.easing || 'ease';
        if (easing === 'custom' && state.bezier1 !== undefined) {
            easing = `cubic-bezier(${state.bezier1 || 0}, ${state.bezier2 || 0}, ${state.bezier3 || 1}, ${state.bezier4 || 1})`;
        }
        return `transition: all ${state.duration || 200}ms ${easing};`;
    };

    allSelectors.forEach(key => {
        let baseSelector = key;
        const effect = this.allEffects[key];
    
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (–®–∞–≥ 2): –ï—Å–ª–∏ —ç—Ç–æ –∫–ª—é—á –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
        if (key === '__AI_PREVIEW__') {
            baseSelector = effect._targetSelector;
            if (!baseSelector) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
        
        if (!effect || !effect.parent) return;

        let effectCss = ''; 
        
        const processState = (state, path = '') => {
            const fullSelector = (baseSelector + path).trim();
            
            let initialStyles = getTransition(state);
            if (state.overflowHidden) {
                initialStyles += ` overflow: hidden !important;`;
            }
            if (state.perspectiveEnabled) {
                initialStyles += ` perspective: ${state.perspectiveValue || 1000}px;`;
            }

            effectCss += `${fullSelector} { ${initialStyles} }\n`;
            
            const hoverStyles = getStyles(state);
            if (hoverStyles) {
                effectCss += `${baseSelector}:hover${path} { ${hoverStyles} }\n`;
            }
            
            if (state.children) {
                Object.keys(state.children).forEach(childKey => {
                    const newPath = `${path} ${childKey.trim()}`;
                    processState(state.children[childKey], newPath);
                });
            }
        };
        
        processState(effect.parent);

        if (effect._hasEffects) {
            effect._hasEffects.forEach(he => {
                const hasStyles = getStyles(he.styles);
                if (hasStyles) {
                    const relativeTrigger = this.getSubtitleFromKey(he.triggerKey);
                    const relativeTarget = he.target;
                    const fullTargetSelector = `${baseSelector} ${relativeTarget}`;
                            
                    let initialHasStyles = getTransition(he.styles);
                    if (he.styles.overflowHidden) {
                         initialHasStyles += ` overflow: hidden !important;`;
                    }
                    if (he.styles.perspectiveEnabled) {
                       initialHasStyles += ` perspective: ${he.styles.perspectiveValue || 1000}px;`;
                    }
                    
                    effectCss += `${fullTargetSelector} { ${initialHasStyles} }\n`;
                    effectCss += `${baseSelector}:has(${relativeTrigger}:hover) ${relativeTarget} { ${hasStyles} }\n`;
                }
            });
        }

        if (effect.disableOnMobile) {
            finalCss += `@media (hover:hover) {\n${effectCss}}\n`;
        } else {
            finalCss += effectCss;
        }
    });
    
    this.els.dynamicStyles.innerHTML = finalCss;
},

buildEffectTree(parentNode) {
      console.log('[DEBUG] buildEffectTree –≤—ã–∑–≤–∞–Ω —Å parentNode:', parentNode);
      console.log('[DEBUG] elementsTabs:', !!this.els.elementsTabs);
      console.log('[DEBUG] activeParentSelector:', this.activeParentSelector);
      if (!this.els.elementsTabs) {
          console.log('[DEBUG] elementsTabs –Ω–µ –Ω–∞–π–¥–µ–Ω!');
          return;
      }
      
      const currentActiveKey = this.activeKey;
    this.els.elementsTabs.innerHTML = '';
    const effects = this.allEffects[this.activeParentSelector];
    console.log('[DEBUG] effects –¥–ª—è activeParentSelector:', effects);
    if (!effects) {
        console.log('[DEBUG] effects –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', this.activeParentSelector);
        return;
    }
    console.log('[DEBUG] effects.parent:', effects.parent);
    console.log('[DEBUG] effects.parent.children:', effects.parent.children);
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    const triggerKeys = new Set((effects._hasEffects || []).map(he => he.triggerKey));
    const buildTreeRecursive = (key, state, container, level) => {
        console.log('[DEBUG] buildTreeRecursive –≤—ã–∑–≤–∞–Ω —Å key:', key, 'state:', state, 'level:', level);
        if (!state.children) {
            console.log('[DEBUG] –ù–µ—Ç children –≤ state –¥–ª—è key:', key);
            return;
        }
        console.log('[DEBUG] Children –¥–ª—è key', key, ':', Object.keys(state.children));
        for (const childKey in state.children) {
            const childState = state.children[childKey];
            const fullPathKey = `${key}|child:${childKey}`;
            console.log('[DEBUG] –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç:', fullPathKey, 'childKey:', childKey);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
            const isTrigger = triggerKeys.has(fullPathKey);
            const { wrapper } = this.createItem(fullPathKey, childKey, level, true, '', isTrigger);
            container.appendChild(wrapper);
            buildTreeRecursive(fullPathKey, childState, container, level + 1);
        }
    };
    // 1. –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
    const { wrapper: parentWrapper } = this.createItem('parent', this.activeParentSelector, 0, false);
    this.els.elementsTabs.appendChild(parentWrapper);
    // 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤
    buildTreeRecursive('parent', effects.parent, this.els.elementsTabs, 1);
    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–∏ :has —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
    if (effects._hasEffects) {
        effects._hasEffects.forEach((has, i) => {
            const triggerElSubtitle = this.getSubtitleFromKey(has.triggerKey);
            const title = `${this.cleanSelectorForDisplay(triggerElSubtitle)} ‚ûî ${this.cleanSelectorForDisplay(has.target)}`;
            const { wrapper } = this.createItem(`_has:${i}`, title, 0, true, '–£—Å–ª–æ–≤–∏–µ :has');
            this.els.elementsTabs.appendChild(wrapper);
        });
    }

   // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–∞–±—ã
   const seenKeys = new Set();
   const tabs = Array.from(this.els.elementsTabs.querySelectorAll('.dbm-element-tab'));
   tabs.forEach(tab => {
       const key = tab.dataset.key;
       if (seenKeys.has(key)) {
           tab.remove();
       } else {
           seenKeys.add(key);
       }
   });
   
   // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
   setTimeout(() => {
       const activeTab = this.els.elementsTabs.querySelector(`[data-key="${currentActiveKey}"]`);
       if (activeTab) {
           this.activeKey = currentActiveKey;
       } else {
           // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'parent' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
           const parentTab = this.els.elementsTabs.querySelector(`[data-key="parent"]`);
           if (parentTab) {
               this.activeKey = 'parent';
               parentTab.click();
           }
       }
   }, 5);
},
// –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ createItem –ù–ê –≠–¢–£
createItem(key, subtitle, level = 0, isDeletable = false, overrideTitle = '', isTrigger = false) {
    const item = document.createElement('button');
    item.className = 'dbm-element-tab';
    item.dataset.key = key;
    let titleHTML = '';
    let subtitleHTML = '';
    const indicatorHTML = isTrigger ? '<span class="dbm-element-tab-indicator">üîó</span>' : '';
    const selectors = subtitle.split(',').map(s => s.trim());
    if (selectors.length > 1) {
        let titleText = overrideTitle || '–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã';
        titleHTML = `<span class="dbm-element-tab-title">${indicatorHTML}${titleText}</span>`;
        subtitleHTML = selectors.map(selector => {
            const translation = this.getTranslationForSelector(selector);
           const badge = translation ? `<span class="dbm-translation-badge-small">${translation}</span>` : '';
            return `<div class="dbm-element-tab-subtitle is-grouped"><span class="dbm-element-tab-title">${this.cleanSelectorForDisplay(selector)} ${badge}</span></div>`;
        }).join('');
    } else {
        const singleSelector = selectors[0];
        let titleText = overrideTitle || (level === 0 ? '–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç' : '–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç');
        const translation = this.getTranslationForSelector(singleSelector);
       const badge = translation ? `<span class="dbm-translation-badge-small">${translation}</span>` : '';
        titleHTML = `<span class="dbm-element-tab-title">${indicatorHTML}${titleText} ${badge}</span>`;
        subtitleHTML = `<div class="dbm-element-tab-subtitle">${this.cleanSelectorForDisplay(singleSelector)}</div>`;
    }
    // --- –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö (–ë–ï–ó –ö–ù–û–ü–ö–ò –î–õ–Ø PARENT) ---
    let actionsHTML = '<div></div>';
   const reselectIcon = `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17.7077 15C17.7077 14.6548 17.9875 14.375 18.3327 14.375C18.6778 14.375 18.9577 14.6548 18.9577 15C18.9576 15.8286 18.6283 16.6242 18.0422 17.2102C17.4927 17.7595 16.7596 18.0827 15.9873 18.1209L15.8327 18.125H15.6748L15.8579 18.3081C16.102 18.5521 16.102 18.9478 15.8579 19.1918C15.6138 19.4359 15.2182 19.4359 14.9741 19.1918L13.7241 17.9418C13.48 17.6978 13.48 17.3021 13.7241 17.0581L14.9741 15.8081C15.2182 15.564 15.6138 15.564 15.8579 15.8081C16.102 16.0521 16.102 16.4478 15.8579 16.6918L15.6748 16.875H15.8327C16.3299 16.875 16.8067 16.6772 17.1584 16.3256C17.5099 15.9741 17.7076 15.4972 17.7077 15ZM16.8743 5.20829C16.8743 4.51796 16.3147 3.95829 15.6243 3.95829H9.37435C9.04284 3.95829 8.72497 4.09009 8.49056 4.3245C8.25615 4.55891 8.12435 4.87678 8.12435 5.20829V8.95829C8.12444 9.64853 8.68408 10.2083 9.37435 10.2083H15.6243C16.3146 10.2083 16.8743 9.64853 16.8743 8.95829V5.20829ZM1.04102 4.99995C1.04107 4.17128 1.37042 3.37571 1.95654 2.78967C2.54257 2.20386 3.3374 1.87491 4.16602 1.87495H4.32389L4.14079 1.69185C3.89671 1.44777 3.89671 1.05214 4.14079 0.808058C4.38487 0.563981 4.7805 0.563981 5.02458 0.808058L6.27458 2.05806C6.51865 2.30214 6.51865 2.69777 6.27458 2.94185L5.02458 4.19185C4.7805 4.43593 4.38487 4.43593 4.14079 4.19185C3.89671 3.94777 3.89671 3.55214 4.14079 3.30806L4.32389 3.12495H4.16602C3.66878 3.12492 3.19196 3.32269 2.84033 3.67427C2.48883 4.02577 2.29106 4.50268 2.29102 4.99995C2.29099 5.34512 2.01118 5.62495 1.66602 5.62495C1.32085 5.62493 1.04102 5.34511 1.04102 4.99995ZM3.12435 14.7924C3.12444 15.1238 3.25618 15.442 3.49056 15.6762C3.72492 15.9104 4.04306 16.0417 4.37435 16.0416H10.6243C11.3147 16.0416 11.8743 15.4819 11.8743 14.7916V11.4583H9.37435C8.28623 11.4583 7.36267 10.7621 7.01921 9.79162H4.37354C4.04217 9.79171 3.72399 9.92345 3.48975 10.1578C3.2556 10.3922 3.12426 10.7103 3.12435 11.0416V14.7924ZM18.1243 8.95829C18.1243 10.3389 17.005 11.4583 15.6243 11.4583H13.1243V14.7916L13.1211 14.9202C13.0563 16.1986 12.0313 17.2236 10.7529 17.2884L10.6243 17.2916H4.37435C3.7115 17.2918 3.07561 17.0286 2.60677 16.56C2.13804 16.0915 1.87463 15.456 1.87435 14.7932V11.0416C1.8742 10.3788 2.13738 9.74288 2.60596 9.27404C3.07447 8.80532 3.71 8.5419 4.37272 8.54162H6.87435V5.20829C6.87435 4.54526 7.13794 3.90954 7.60677 3.44071C8.0756 2.97188 8.71132 2.70829 9.37435 2.70829H15.6243C17.005 2.70829 18.1243 3.82761 18.1243 5.20829V8.95829Z" fill="#96A2AB"/>
</svg>
`;
    if (isDeletable) { // –ö–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        actionsHTML = `
        <div class="dbm-effect-item-actions">
            <button class="dbm-btn-icon dbm-btn-secondary reselect-target-btn dbm-btn-sm" title="–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç">${reselectIcon}</button>
           <button class="dbm-delete-target-btn dbm-btn-sm" title="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å">
           <svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.6553 3.43457C12.6551 3.26203 12.5153 3.12221 12.3428 3.12207H7.65332C7.57034 3.12207 7.49032 3.15519 7.43164 3.21387C7.37316 3.27244 7.33995 3.3518 7.33984 3.43457V4.68555H12.6553V3.43457ZM5.79785 15.7227C5.84798 16.3743 6.39135 16.8779 7.04492 16.8779H12.9492C13.6028 16.8779 14.1462 16.3743 14.1963 15.7227L14.9492 5.93555H5.04492L5.79785 15.7227ZM11.6641 13.543C12.0091 13.543 12.2888 13.823 12.2891 14.168C12.2891 14.5131 12.0092 14.793 11.6641 14.793H8.33008C7.9849 14.793 7.70508 14.5131 7.70508 14.168C7.7053 13.823 7.98504 13.543 8.33008 13.543H11.6641ZM13.9053 4.68555H16.667C17.0122 4.68555 17.292 4.96537 17.292 5.31055C17.292 5.65572 17.0122 5.93555 16.667 5.93555H16.2041L15.4434 15.8193C15.343 17.1221 14.2559 18.1279 12.9492 18.1279H7.04492C5.7383 18.1279 4.65217 17.122 4.55176 15.8193L3.79102 5.93555H3.32812C2.98295 5.93555 2.70312 5.65572 2.70312 5.31055C2.70313 4.96537 2.98295 4.68555 3.32812 4.68555H6.08984V3.43457C6.08995 3.02028 6.25495 2.62307 6.54785 2.33008C6.84095 2.03698 7.23882 1.87207 7.65332 1.87207H12.3428C13.2057 1.87221 13.9051 2.57168 13.9053 3.43457V4.68555Z" fill="#96A2AB"/>
</svg>
</button>
        </div>`;
    }
    item.innerHTML = `
        <div class="dbm-element-tab-info">${titleHTML}${subtitleHTML}</div>
        ${actionsHTML}
    `;
    item.onclick = (e) => {
        e.stopPropagation();
        if (e.target.closest('.dbm-delete-target-btn')) {
            this.deleteTarget(key);
        } else if (e.target.closest('.reselect-target-btn')) {
            this.reselectChildTarget(key);
        } else {
            this.activateEditorFor(item);
        }
    };
    const wrapper = document.createElement('div');
    if (level > 0) {
        wrapper.className = 'dbm-element-tab-wrapper';
        wrapper.style.paddingLeft = `${level * 20}px`;
    }
    wrapper.appendChild(item);
    return { item, wrapper };
},
// –î–æ–±–∞–≤—å —ç—Ç–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∫—É–¥–∞-–Ω–∏–±—É–¥—å –≤ –∫–æ–Ω–µ—Ü –æ–±—ä–µ–∫—Ç–∞ dbmHoverArchitect
getSubtitleFromKey(key) {
    if (!key) return '';
    const parts = key.split('|');
    const lastPart = parts[parts.length - 1];
    return lastPart.startsWith('child:') ? lastPart.slice(6) : lastPart;
},
// –ó–ê–ú–ï–ù–ò –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ getEffectDataForKey
getEffectDataForKey(key, parentData = null) {
    const effects = this.allEffects[this.activeParentSelector];
    if (!effects) return null;
    let state, subtitle, domNode;
    const keyParts = key.split('|');
    const lastKeyPart = keyParts[keyParts.length - 1];
    if (lastKeyPart === 'parent') {
        state = effects.parent;
        subtitle = this.activeParentSelector;
        domNode = document.querySelector(this.activeParentSelector);
        return {
            title: '–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç',
            subtitle: subtitle,
            isDeletable: false,
            state: state,
            domNode: domNode
        };
    }
    if (lastKeyPart.startsWith('child:')) {
        const childSel = lastKeyPart.slice(6);
        let parentState = effects.parent;
        let parentNode = document.querySelector(this.activeParentSelector);
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—É—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ DOM-—É–∑–µ–ª
        if (parentData) {
             parentState = parentData.state;
             parentNode = parentData.domNode;
        }
        state = parentState.children ? parentState.children[childSel] : null;
        domNode = parentNode ? parentNode.querySelector(childSel.split(',')[0].trim()) : null; // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        return {
            title: '–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç',
            subtitle: childSel,
            isDeletable: true,
            state: state,
            domNode: domNode,
        };
    }
    return null;
},
// ‚úÖ –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ createItem –ù–ê –≠–¢–£
createItem(key, subtitle, level = 0, isDeletable = false, overrideTitle = '', isTrigger = false) {
    const item = document.createElement('button');
    item.className = 'dbm-element-tab';
    item.dataset.key = key;

    let titleHTML = '';
    let subtitleHTML = '';
    const indicatorHTML = isTrigger ? '<span class="dbm-element-tab-indicator">üîó</span>' : '';

    const selectors = subtitle.split(',').map(s => s.trim());
    if (selectors.length > 1) {
        let titleText = overrideTitle || '–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã';
        titleHTML = `<span class="dbm-element-tab-title">${indicatorHTML}${titleText}</span>`;
        subtitleHTML = selectors.map(selector => {
            const translation = this.getTranslationForSelector(selector);
            const badge = translation ? `<span class="dbm-translation-badge-small">${translation}</span>` : '';
            return `<div class="dbm-element-tab-subtitle is-grouped"><span class="dbm-element-tab-title">${this.cleanSelectorForDisplay(selector)} ${badge}</span></div>`;
        }).join('');
    } else {
        const singleSelector = selectors[0];
        let titleText = overrideTitle || (level === 0 ? '–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç' : '–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç');
        const translation = this.getTranslationForSelector(singleSelector);
        const badge = translation ? `<span class="dbm-translation-badge-small">${translation}</span>` : '';
        titleHTML = `<span class="dbm-element-tab-title">${indicatorHTML}${titleText} ${badge}</span>`;
        subtitleHTML = `<div class="dbm-element-tab-subtitle">${this.cleanSelectorForDisplay(singleSelector)}</div>`;
    }

    let actionsHTML = '<div class="dbm-effect-item-actions"></div>';

    if (key === 'parent') {
        actionsHTML = `
        <div class="dbm-effect-item-actions">
            <button class="dbm-btn-icon dbm-btn-secondary reselect-parent-btn dbm-btn-sm" title="–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç">${window.SuperSelectionManager?.ICONS?.reselect || ''}</button>
        </div>`;
    } else if (isDeletable) {
        actionsHTML = `
        <div class="dbm-effect-item-actions">
            <button class="dbm-btn-icon dbm-btn-secondary reselect-target-btn dbm-btn-sm" title="–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç">${window.SuperSelectionManager?.ICONS?.reselect || ''}</button>
            <button class="dbm-delete-target-btn dbm-btn-icon dbm-btn-sm" title="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å">${window.SuperSelectionManager?.ICONS?.deleteCross || ''}</button>
        </div>`;
    }

    item.innerHTML = `
        <div class="dbm-element-tab-info">${titleHTML}${subtitleHTML}</div>
        ${actionsHTML}
    `;

    item.onclick = (e) => {
        e.stopPropagation();
        if (e.target.closest('.dbm-delete-target-btn')) {
            this.deleteTarget(key);
        } else if (e.target.closest('.reselect-target-btn')) {
            this.reselectChildTarget(key);
        } else if (e.target.closest('.reselect-parent-btn')) {
            this.reselectParentTarget();
        } else {
            this.activateEditorFor(item);
        }
    };
    
    const wrapper = document.createElement('div');
    if (level > 0) {
        wrapper.className = 'dbm-element-tab-wrapper';
        wrapper.style.paddingLeft = `${level * 20}px`;
    }
    wrapper.appendChild(item);
    return { item, wrapper };
},

activateEditorFor(tabItem) {
    this.activeKey = tabItem.dataset.key;
    document.querySelectorAll('#dbm-elements-tabs .dbm-element-tab.active').forEach(i => i.classList.remove('active'));
    tabItem.classList.add('active');
    this.clearAllOverlays();

    const activeDomNode = this.getDomNodeForKey(this.activeKey);
    if (activeDomNode) activeDomNode.classList.add('dbm-currently-editing-element');

    const controlsContainer = document.getElementById('dbm-controls-container');
    controlsContainer.innerHTML = this.dbmGetControlsHTML();

    document.getElementById('dbm-open-presets-btn').onclick = () => this.showPresetsManagerModal({ context: 'apply' });
    document.getElementById('dbm-ai-helper-btn').onclick = () => this.showAIAssistantModal();

    const addHasBtn = document.getElementById('dbm-add-has-btn');
    const effects = this.allEffects[this.activeParentSelector];
    const children = effects?.parent?.children;

    if (this.activeKey === 'parent' && children && Object.keys(children).length > 0) {
        addHasBtn.disabled = false;
        addHasBtn.onclick = () => this.startHasEffectWorkflow();
    } else {
        addHasBtn.disabled = true;
    }

    document.getElementById('dbm-add-child-btn').onclick = () => {
        const rootParentDomNode = this.getDomNodeForKey('parent');
        if (!rootParentDomNode) {
            console.error("dbmHoverArchitect Error: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
            return;
        }
        this.showChildTargetModal(rootParentDomNode, 'parent');
    };

    controlsContainer.querySelectorAll('.dbm-property-group-card').forEach(card => {
        const groupName = card.dataset.groupName;
        const switchInput = card.querySelector(`[data-switch="${groupName}"]`);
        card.addEventListener('click', (e) => {
            if (e.target.closest('.dbm-switch')) return;
            this.showPropsEditModal(groupName);
        });
        switchInput.addEventListener('change', (e) => {
            this.dbmUpdateState(this.activeKey, `${groupName}Enabled`, e.target.checked);
            card.classList.toggle('active', e.target.checked);
        });
    });

    this.loadStateIntoControls(this.activeKey);
    this.updatePresetIndicatorUI();

    this.updateDynamicButtons();
},
        loadStateIntoControls(key) {
            const state = this.getCurrentStateForKey(key);
            if(!state) return;
            document.querySelectorAll('.dbm-property-group-card').forEach(card => {
                const groupName = card.dataset.groupName;
                const switchInput = card.querySelector(`[data-switch="${groupName}"]`);
                const isEnabled = state[`${groupName}Enabled`] || false;
                switchInput.checked = isEnabled;
                card.classList.toggle('active', isEnabled);
            });
            this.updateEffectCountInCards();
        },
updateManagerList() {
    this.els.effectsList.innerHTML = '';
    const effectKeys = Object.keys(this.allEffects).filter(key => !key.startsWith('__'));
            const managerHeader = document.getElementById('dbm-manager-header');

    if (effectKeys.length === 0) {
                if (managerHeader) managerHeader.style.display = 'none';
                
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                this.els.effectsList.innerHTML = `<div class="dbm-no-effects-placeholder">
                    <div class="icon">üé®</div>
                    <h3>–≠—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</p>
                </div>`;
                
                this.updateDynamicButtons(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ —Ñ—É—Ç–µ—Ä–µ
        return;
    }

            if (managerHeader) managerHeader.style.display = 'flex';
        
            // –¶–∏–∫–ª –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            for (const selector of effectKeys) {
                const effect = this.allEffects[selector];
                const blockInfo = this.getBlockInfo(selector);
                
                // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–µ–≤
    const countActiveLayersAndChildren = (state) => {
        let total = { activeLayers: 0, children: 0 };
                    const hasActiveEffects = (s) => Object.keys(this.getDefaultState()).some(key => {
                        return s[key] !== undefined && s[key] !== this.getDefaultState()[key] && key !== 'children';
                    });

        if (hasActiveEffects(state)) {
            total.activeLayers++;
        }

        if (state.children) {
            const childKeys = Object.keys(state.children);
            total.children += childKeys.length;
            childKeys.forEach(key => {
                const childStats = countActiveLayersAndChildren(state.children[key]);
                total.activeLayers += childStats.activeLayers;
                total.children += childStats.children;
            });
        }
        return total;
    };

        const stats = countActiveLayersAndChildren(effect.parent);
        const hasEffectsCount = (effect._hasEffects || []).length;

        const item = document.createElement('div');
                item.className = 'dbm-effect-item-card';
        item.dataset.selector = selector;
        item.innerHTML = `
                    <div class="dbm-effect-item-header">
                        <div class="dbm-effect-item-info">
                            <div class="dbm-effect-item-block-name">${blockInfo ? `${blockInfo.cod} | ${blockInfo.title}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫'}</div>
                            <div class="dbm-effect-item-selector">${this.cleanSelectorForDisplay(selector)}</div>
                </div>
                        <div class="dbm-effect-item-actions">
                    <button data-selector-delete="${selector}" class="dbm-btn-icon dbm-btn-secondary delete-effect-btn  dbm-btn-sm" title="–£–¥–∞–ª–∏—Ç—å">
                                ${window.SuperSelectionManager?.ICONS?.trash || ''}
                    </button>
                </div>
            </div>
                    <div class="dbm-effect-item-stats">
                        <span class="dbm-effect-item-badge">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–µ–≤: <strong>${stats.activeLayers}</strong></span>
                        <span class="dbm-effect-item-badge">–î–æ—á–µ—Ä–Ω–∏—Ö: <strong>${stats.children}</strong></span>
                        <span class="dbm-effect-item-badge">:has(): <strong>${hasEffectsCount}</strong></span>
            </div>
        `;
        this.els.effectsList.appendChild(item);

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        item.addEventListener('mouseenter', () => {
            try {
                        document.querySelectorAll(selector).forEach(el => el.classList.add('dbm-highlight-element-manager'));
                    } catch (e) { console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏:", selector); }
        });
        item.addEventListener('mouseleave', () => {
             try {
                        document.querySelectorAll(selector).forEach(el => el.classList.remove('dbm-highlight-element-manager'));
            } catch (e) {}
        });
    }

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            this.els.effectsList.querySelectorAll('.dbm-effect-item-card').forEach(card => card.addEventListener('click', e => {
        if (e.target.closest('.delete-effect-btn')) return;
                this.dbmShowEditorView(e.currentTarget.dataset.selector);
    }));

    this.els.effectsList.querySelectorAll('.delete-effect-btn').forEach(b => b.addEventListener('click', async (e) => {
        e.stopPropagation();
        const selector = e.currentTarget.dataset.selectorDelete;
        const confirmed = await this.showModalConfirm("–£–¥–∞–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?", `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ <strong>${this.cleanSelectorForDisplay(selector)}</strong>?`);
        if (confirmed) {
            delete this.allEffects[selector];
            this.generateAndApplyCSS();
            this.updateManagerList();
                    this.updateDynamicButtons(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }));
},
        deleteTarget(key) {
            const effects = this.allEffects[this.activeParentSelector];
            if (!effects) return;
            if (key.startsWith('_has:')) {
                effects._hasEffects.splice(parseInt(key.slice(5), 10), 1);
            } else {
                const keyParts = key.split('|');
                let currentState = effects.parent;
                // –ò–¥–µ–º –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                for (let i = 1; i < keyParts.length - 1; i++) {
                    const childSel = keyParts[i].slice(6);
                    currentState = currentState.children[childSel];
                }
                // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                const lastPart = keyParts[keyParts.length - 1];
                const childToDelete = lastPart.slice(6);
                delete currentState.children[childToDelete];
            }
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
            this.activeKey = 'parent';
            this.buildEffectTree(document.querySelector(this.activeParentSelector));
            this.generateAndApplyCSS();
        },
        // --- HELPERS ---
        // –ó–ê–ú–ï–ù–ò –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ getDomNodeForKey
        getDomNodeForKey(key) {
            if (this.activeParentSelector.startsWith('__')) return null;
            try {
                let currentNode = document.querySelector(this.activeParentSelector);
                if (!currentNode) return null;
                if (key === 'parent') return currentNode;
                if (key.startsWith('_has:')) {
                     const effect = this.allEffects[this.activeParentSelector]._hasEffects[parseInt(key.slice(5), 10)];
                     if (!effect || !effect.target) return null;
                     return effect.target === '.' ? currentNode : currentNode.querySelector(effect.target);
                }
                const keyParts = key.split('|');
                // –ù–∞—á–∏–Ω–∞–µ–º —Å 1, –ø–æ—Ç–æ–º—É —á—Ç–æ 0-–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ–≥–¥–∞ 'parent'
                for (let i = 1; i < keyParts.length; i++) {
                    const part = keyParts[i];
                    if (part.startsWith('child:')) {
                        const childSel = part.slice(6).split(',')[0].trim(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                        if (currentNode && childSel) {
                            currentNode = currentNode.querySelector(childSel);
                        } else {
                            return null; // –ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —ç—Ç–∞–ø–µ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                        }
                    }
                }
                return currentNode;
            } catch (e) { return null; }
        },
        async copyCSS() {
            const isInEditor = !!this.activeParentSelector;
            let cssToCopy = '';
        
            if (isInEditor) {
                const choice = await this.showModalCopy(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ø–∞–ø
                if (choice === 'cancel') return;
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cssToCopy = this.generateCssForScope(choice);
        
            } else {
                // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –≤—Å–µ–≥–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å—ë
                cssToCopy = this.generateCssForScope('all');
            }
        
            if (!cssToCopy.trim()) {
                    this.showModalPrompt("–ù–µ—á–µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.", null, false, 'OK', true);
                    return;
                }

            const formattedCss = `<style>\n${cssToCopy.trim()}\n</style>`;
                navigator.clipboard.writeText(formattedCss).then(() => {
                this.showModalPrompt("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", "CSS-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.", null, false, 'OK');
                }, () => {
                this.showModalPrompt("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.", null, false, 'OK', true);
                });
        },
        // Helper to clean selector for display purposes (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        cleanSelectorForDisplay(selector) {
            if (window.SuperSelectionManager) {
                return window.SuperSelectionManager.cleanSelectorForDisplay(selector);
            }
            if (!selector || typeof selector !== 'string') return '';
            return selector.replace(/^(#rec[0-9]+|\.uc-[\w-]+)\s*/, '');
        },
        getTranslationForSelector(selector) {
            if (window.SuperSelectionManager) {
                return window.SuperSelectionManager.getTranslationForSelector(selector);
            }
            // Fallback –µ—Å–ª–∏ SuperSelectionManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            for (const key in window.SuperSelectionManager?.TRANSLATION_MAP || {}) {
                if (selector.toLowerCase().includes(key)) return window.SuperSelectionManager.TRANSLATION_MAP[key];
            }
            return '';
        },
        getBlockInfo(selector) {
            if (window.SuperSelectionManager) {
                return window.SuperSelectionManager.getBlockInfo(selector);
            }
            // Fallback –µ—Å–ª–∏ SuperSelectionManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if (!selector || typeof selector !== 'string' || selector.startsWith('__')) return null;
            try {
                const el = document.querySelector(selector);
                if (!el) return null;
                const tildaBlock = el.closest('.r.t-rec');
                if (tildaBlock) {
                    const recordType = tildaBlock.getAttribute('data-record-type');
                    return window.SuperSelectionManager?.TILDA_BLOCK_MAP?.[recordType] || null;
                }
            } catch(e) { return null; }
            return null;
        },
        addHighlightEventListeners(containerElement) {
            containerElement.querySelectorAll('[data-selector]').forEach(item => {
                const selector = item.dataset.selector;
                let elementToHighlight; // –ò—Å–ø–æ–ª—å–∑—É–µ–º let, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç
                try {
                    elementToHighlight = document.querySelector(selector);
                } catch (e) {
                    console.error("Invalid selector for highlighting:", selector, e);
                    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                }
                if (elementToHighlight) {
                    item.addEventListener('mouseenter', () => {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∞—Å—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å —Å—Ç–∏–ª–∏
                       elementToHighlight.classList.add('dbm-highlight-element');
                    });
                    item.addEventListener('mouseleave', () => {
                       elementToHighlight.classList.remove('dbm-highlight-element');
                    });
                }
            });
        },
       // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ disableOnMobile
getDefaultEffectState: () => ({
    parent: dbmHoverArchitect.getDefaultState(),
    children: {},
    _hasEffects: [],
    disableOnMobile: true 
}),
getDefaultState: () => ({
    // Animation
    animationEnabled: true, duration: 300, easing: 'ease',
    bezier1: 0.25, bezier2: 0.1, bezier3: 0.25, bezier4: 1.0,
    // Transform
    transformEnabled: false, translateX: 0, translateY: 0,
    rotateX: 0, rotateY: 0, rotateZ: 0,
    scaleX: 1, scaleY: 1,
    skewX: 0, skewY: 0,
    perspectiveEnabled: false,
    perspectiveValue: 1000,
        // Margins & Padding
    marginPaddingEnabled: false,
    marginTop: '', marginRight: '', marginBottom: '', marginLeft: '',
    paddingTop: '', paddingRight: '', paddingBottom: '', paddingLeft: '',
        // Background & Gradient
    styleEnabled: false, opacity: 1,
        backgroundType: 'solid',
    backgroundColor: '',
        gradientType: 'linear',
    gradientAngle: 90,
    gradientColor1: '#ffffff',
    gradientColor2: '#000000',
    // Typography
    textEnabled: false, color: '', fontSize: '', fontWeight: '',
        letterSpacing: '',
        lineHeight: '',
        textDecorationLine: 'none',
        textDecorationStyle: 'solid',
        textDecorationColor: '',
    // Borders & Corners
    borderEnabled: false,
    borderTopLeftRadius: '', borderTopRightRadius: '',
    borderBottomLeftRadius: '', borderBottomRightRadius: '',
    borderWidth: '',
    borderStyle: 'solid',
    borderColor: '',
    // Shadow
    boxShadowEnabled: false, boxShadowX: 0, boxShadowY: 10, boxShadowBlur: 20, boxShadowSpread: 0, boxShadowColor: 'rgba(0,0,0,0.15)',
        boxShadowInset: false,
    // Filters
    filterEnabled: false, blur: 0, brightness: 1, contrast: 1, saturate: 1, grayscale: 0,
        backdropBlur: 0,
        
        // ‚úÖ –ù–û–í–û–ï –°–í–û–ô–°–¢–í–û
        overflowHidden: false,

    // Internal
    children: {}
}),
        // --- MODALS & PRESETS ---
showModalConfirm(title, text) {
                  return new Promise(resolve => {
                        this.els.panelOverlay.innerHTML = `
                    <div class="dbm-modal-content-wrapper">
                        <div class="dbm-modal-content">
                            <div class="dbm-modal-header">
                                <h4>${title}</h4>
                                <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                                          </div>
                            <div class="dbm-modal-body">
                                <p>${text}</p>
                                    </div>
                            <div class="dbm-modal-footer">
                                <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                                <button id="dbm-modal-confirm-btn" class="dbm-btn dbm-btn-primary" style="background-color: var(--dbm-danger-color);">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                            </div>
                        </div>
                              </div>`;
                        this.els.panelOverlay.classList.add('visible');
                        const cleanup = (val) => { this.removeModal(); resolve(val); };

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                        this.addModalCloseListeners(cleanup);

                this.els.panelOverlay.querySelector('#dbm-modal-confirm-btn').onclick = () => cleanup(true);
                this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn').onclick = () => cleanup(false);
                  });
            },
 showModalPrompt(title, text, onConfirm = null, showCancel = false, confirmText = 'OK', isError = false) {
                        this.els.panelOverlay.innerHTML = `
                                <div class="dbm-modal-content-wrapper">
                                        <div class="dbm-modal-content">
                                            <div class="dbm-modal-header">
                                                <h4 style="color: ${isError ? 'var(--dbm-danger-color)' : 'inherit'}">${title}</h4>
                                                <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                                            </div>
                                            <div class="dbm-modal-body">
                                                <div>${text}</div>
                                                </div>
                                            <div class="dbm-modal-footer">
                                                ${showCancel ? `<button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>` : ''}
                                                <button id="dbm-modal-ok-btn" class="dbm-btn dbm-btn-primary">${confirmText}</button>
                                        </div>
                                        </div>
                                </div>`;
                        this.els.panelOverlay.classList.add('visible');
                        const cleanup = () => this.removeModal();

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                        this.addModalCloseListeners(cleanup);

                        this.els.panelOverlay.querySelector('#dbm-modal-ok-btn').onclick = () => { if (onConfirm) onConfirm(); else cleanup(); };
                        if (showCancel) this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn').onclick = cleanup;
                },
 removeModal() {
                        if (this.els.panelOverlay.classList.contains('visible')) {
                                this.els.panelOverlay.classList.remove('visible');
                        }
                        this.updateHighlight(null);
                },

showSelectorModal(title, parentElement, onConfirm, options = {}) {
    const { singleSelection = false, confirmText = '–î–æ–±–∞–≤–∏—Ç—å', allowParentSelection = false, onCancel = () => {} } = options;
    let elements = [];
    if (allowParentSelection) {
        elements.push(parentElement);
    }
    parentElement.querySelectorAll('*').forEach(child => {
        if(!child.closest('#dbm-editor-panel')) {
            elements.push(child);
        }
    });
    const selectorToElementMap = new Map();
    elements.forEach(el => {
        const selector = this.getUniqueSelector(el);
        if (selector && !selectorToElementMap.has(selector)) {
            selectorToElementMap.set(selector, el);
        }
    });
    const uniqueSelectors = Array.from(selectorToElementMap.keys());
    const listItemsHTML = uniqueSelectors.map(selector => {
        const isParent = selector === this.activeParentSelector;
        const translation = this.getTranslationForSelector(selector);
        const badge = translation ? `<span class="dbm-translation-badge">${translation}</span>` : '';
        const typeBadge = `<span class="dbm-element-type-badge">${isParent ? '–û–°–ù–û–í–ù–û–ô' : '–î–æ—á–µ—Ä–Ω–∏–π'}</span>`;
        const cleanPart = isParent ? this.cleanSelectorForDisplay(selector) : selector.split(' ').pop();
        return `<div class="dbm-modal-list-item can-apply" data-selector="${selector.replace(/"/g, '&quot;')}">
                    <div class="dbm-modal-list-item-info">
                    ${typeBadge} ${cleanPart} ${badge}
                    </div>
                </div>`;
    }).join('');

    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content">
                <div class="dbm-modal-header">
                <h4>${title}</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <div class="dbm-modal-list">${listItemsHTML}</div>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                    <button id="dbm-modal-confirm-btn" class="dbm-btn dbm-btn-primary" disabled>${confirmText}</button>
                </div>
            </div>
        </div>`;
    this.els.panelOverlay.classList.add('visible');

    const confirmBtn = this.els.panelOverlay.querySelector('#dbm-modal-confirm-btn');
    const cancelBtn = this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn');
    const allListItems = this.els.panelOverlay.querySelectorAll('.dbm-modal-list-item');

        allListItems.forEach(item => {
        const elementToHighlight = selectorToElementMap.get(item.dataset.selector);
        if (elementToHighlight) {
            item.addEventListener('mouseenter', () => elementToHighlight.classList.add('dbm-highlight-element-child'));
            item.addEventListener('mouseleave', () => elementToHighlight.classList.remove('dbm-highlight-element-child'));
        }
        item.addEventListener('click', () => {
            console.log('[SUPER-HOVER] –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞:', item.dataset.selector);
            if (singleSelection) {
                allListItems.forEach(i => i.classList.remove('selected'));
                item.classList.add('selected');
            } else {
                item.classList.toggle('selected');
            }
            const hasSelected = this.els.panelOverlay.querySelector('.dbm-modal-list-item.selected');
            confirmBtn.disabled = !hasSelected;
            console.log('[SUPER-HOVER] –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞:', !confirmBtn.disabled);
        });
    });

    const cleanup = () => {
        selectorToElementMap.forEach(el => el.classList.remove('dbm-highlight-element-child'));
        this.removeModal();
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    this.addModalCloseListeners(() => {
        onCancel();
        cleanup();
    });

    confirmBtn.onclick = () => {
        const selectedSelectors = Array.from(this.els.panelOverlay.querySelectorAll('.dbm-modal-list-item.selected')).map(i => i.dataset.selector);
        console.log('[SUPER-HOVER] –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:', selectedSelectors);
        onConfirm(selectedSelectors);
        cleanup();
    };
    
    cancelBtn.onclick = () => {
        onCancel();
        cleanup();
    };
},
showChildTargetModal(parentNode, parentKey, options = {}) {
    if (!parentNode) return;
    const { singleSelection = false, confirmText = '–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ', onConfirm: onConfirmCallback } = options;

    const onConfirm = (selectedFullSelectors) => {
        if (typeof onConfirmCallback === 'function') {
            onConfirmCallback(selectedFullSelectors);
            return;
        }

        const parentState = this._getStateObjectRef(parentKey);
        if (!parentState) return;
        if (!parentState.children) {
            parentState.children = {};
        }

        let lastCreatedKey = null;

        selectedFullSelectors.forEach(selector => {
            const childElement = document.querySelector(selector);
            if (!childElement) return;
            const relativeSelector = this.getRelativeSelector(childElement, parentNode);
            if (relativeSelector && !parentState.children[relativeSelector]) {
                parentState.children[relativeSelector] = this.getDefaultState();
                lastCreatedKey = `${parentKey}|child:${relativeSelector}`;
            }
        });

        this.buildEffectTree(document.querySelector(this.activeParentSelector));
        this.generateAndApplyCSS();

        setTimeout(() => {
            if (lastCreatedKey) {
                try {
                    const newTab = this.els.elementsTabs.querySelector(`[data-key="${lastCreatedKey.replace(/"/g, '\\"')}"]`);
                    if (newTab) {
                        newTab.click();
                    }
                } catch (e) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–π:", e);
                }
            }
        }, 50);
    };

    this.showSelectorModal(
        singleSelection ? '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç' : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç(—ã)',
        parentNode,
        onConfirm,
        { singleSelection, confirmText }
    );
},


showModalCopy() {
    return new Promise(resolve => {
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content">
                <div class="dbm-modal-header">
                    <h4>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å CSS</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å—Ç–∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</p>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-copy-current" class="dbm-btn dbm-btn-secondary">–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ</button>
                    <button id="dbm-copy-all" class="dbm-btn dbm-btn-primary">–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</button>
                </div>
            </div>
        </div>`;
        this.els.panelOverlay.classList.add('visible');
        
        const cleanup = (val) => { this.removeModal(); resolve(val); };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.addModalCloseListeners(() => cleanup('cancel'));
        
        this.els.panelOverlay.querySelector('#dbm-copy-current').onclick = () => cleanup('current');
        this.els.panelOverlay.querySelector('#dbm-copy-all').onclick = () => cleanup('all');
    });
},

generateCssForScope(scope) {
    const selectors = scope === 'all' 
        ? Object.keys(this.allEffects).filter(key => !key.startsWith('__'))
        : [this.activeParentSelector];
    
    let finalCss = '';

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const getStyles = (state) => {
        let styles = '', transforms = [], filters = [], backdropFilters = [];
        if(!state) return '';
        if (state.transformEnabled) {
            if (state.translateX || state.translateY) transforms.push(`translate(${state.translateX || 0}px, ${state.translateY || 0}px)`);
            if (state.scaleX != 1 && state.scaleX !== undefined) transforms.push(`scaleX(${state.scaleX})`);
            if (state.scaleY != 1 && state.scaleY !== undefined) transforms.push(`scaleY(${state.scaleY})`);
            if (state.skewX || state.skewY) transforms.push(`skew(${state.skewX || 0}deg, ${state.skewY || 0}deg)`);
            if (state.rotateX) transforms.push(`rotateX(${state.rotateX}deg)`);
            if (state.rotateY) transforms.push(`rotateY(${state.rotateY}deg)`);
            if (state.rotateZ) transforms.push(`rotateZ(${state.rotateZ}deg)`);
        }
        if (state.filterEnabled) {
            if (state.blur > 0) filters.push(`blur(${state.blur}px)`);
            if (state.brightness != 1 && state.brightness !== undefined) filters.push(`brightness(${state.brightness})`);
            if (state.contrast != 1 && state.contrast !== undefined) filters.push(`contrast(${state.contrast})`);
            if (state.saturate != 1 && state.saturate !== undefined) filters.push(`saturate(${state.saturate})`);
            if (state.grayscale > 0) filters.push(`grayscale(${state.grayscale})`);
            if (state.backdropBlur > 0) backdropFilters.push(`blur(${state.backdropBlur}px)`);
        }
        if (transforms.length) styles += `transform: ${transforms.join(' ')};`;
        if (filters.length) styles += `filter: ${filters.join(' ')};`;
        if (backdropFilters.length) styles += `backdrop-filter: ${backdropFilters.join(' ')}; -webkit-backdrop-filter: ${backdropFilters.join(' ')};`;
        if (state.styleEnabled) {
            if (state.opacity != 1 && state.opacity !== undefined) styles += `opacity: ${state.opacity};`;
            if (state.backgroundType === 'solid' && state.backgroundColor) {
                styles += `background-color: ${state.backgroundColor} !important;`;
            } else if (state.backgroundType === 'gradient') {
                const gradType = state.gradientType === 'linear' ? 'linear-gradient' : 'radial-gradient';
                const angle = state.gradientType === 'linear' ? `${state.gradientAngle}deg, ` : '';
                styles += `background-image: ${gradType}(${angle}${state.gradientColor1}, ${state.gradientColor2}) !important;`;
            }
        }
        if (state.boxShadowEnabled) {
            const inset = state.boxShadowInset ? 'inset ' : '';
            styles += `box-shadow: ${inset}${state.boxShadowX || 0}px ${state.boxShadowY || 0}px ${state.boxShadowBlur || 0}px ${state.boxShadowSpread || 0}px ${state.boxShadowColor || 'rgba(0,0,0,0.1)'};`;
        }
        if (state.textEnabled) {
            if (state.color) styles += `color: ${state.color} !important;`;
            if (state.fontSize) styles += `font-size: ${state.fontSize}px;`;
            if (state.fontWeight) styles += `font-weight: ${state.fontWeight};`;
            if (state.letterSpacing) styles += `letter-spacing: ${state.letterSpacing}px;`;
            if (state.lineHeight) styles += `line-height: ${state.lineHeight};`;
            if (state.textDecorationLine && state.textDecorationLine !== 'none') {
                styles += `text-decoration: ${state.textDecorationLine} ${state.textDecorationStyle} ${state.textDecorationColor || 'currentColor'};`;
            }
        }
        if (state.borderEnabled) {
            if (state.borderTopLeftRadius) styles += `border-top-left-radius: ${state.borderTopLeftRadius}px;`;
            if (state.borderTopRightRadius) styles += `border-top-right-radius: ${state.borderTopRightRadius}px;`;
            if (state.borderBottomRightRadius) styles += `border-bottom-right-radius: ${state.borderBottomRightRadius}px;`;
            if (state.borderBottomLeftRadius) styles += `border-bottom-left-radius: ${state.borderBottomLeftRadius}px;`;
            if (state.borderWidth && state.borderStyle && state.borderColor) {
                styles += `border: ${state.borderWidth}px ${state.borderStyle} ${state.borderColor};`;
            }
        }
        if (state.marginPaddingEnabled) {
            if(state.marginTop) styles += `margin-top: ${state.marginTop}px !important;`;
            if(state.marginRight) styles += `margin-right: ${state.marginRight}px !important;`;
            if(state.marginBottom) styles += `margin-bottom: ${state.marginBottom}px !important;`;
            if(state.marginLeft) styles += `margin-left: ${state.marginLeft}px !important;`;
            if(state.paddingTop) styles += `padding-top: ${state.paddingTop}px !important;`;
            if(state.paddingRight) styles += `padding-right: ${state.paddingRight}px !important;`;
            if(state.paddingBottom) styles += `padding-bottom: ${state.paddingBottom}px !important;`;
            if(state.paddingLeft) styles += `padding-left: ${state.paddingLeft}px !important;`;
        }
        return styles;
    };
    const getTransition = (state) => {
        if (!state || !state.animationEnabled) return `transition: all 200ms ease;`;
        let easing = state.easing || 'ease';
        if (easing === 'custom' && state.bezier1 !== undefined) {
            easing = `cubic-bezier(${state.bezier1 || 0}, ${state.bezier2 || 0}, ${state.bezier3 || 1}, ${state.bezier4 || 1})`;
        }
        return `transition: all ${state.duration || 200}ms ${easing};`;
    };

    selectors.forEach(baseSelector => {
        const effect = this.allEffects[baseSelector];
        if (!effect || !effect.parent) return;
        let effectCss = '';
        const processState = (state, path = '') => {
            const fullSelector = (baseSelector + path).trim();
            let initialStyles = getTransition(state);
            if (state.overflowHidden) {
                initialStyles += ` overflow: hidden !important;`;
            }
            if (state.perspectiveEnabled) {
                initialStyles += ` perspective: ${state.perspectiveValue || 1000}px;`;
            }
            effectCss += `${fullSelector} { ${initialStyles} }\n`;
            const hoverStyles = getStyles(state);
            if (hoverStyles) {
                effectCss += `${baseSelector}:hover${path} { ${hoverStyles} }\n`;
            }
            if (state.children) {
                Object.keys(state.children).forEach(childKey => {
                    const newPath = `${path} ${childKey.trim()}`;
                    processState(state.children[childKey], newPath);
                });
            }
        };
        processState(effect.parent);
        if (effect._hasEffects) {
            effect._hasEffects.forEach(he => {
                const hasStyles = getStyles(he.styles);
                if (hasStyles) {
                    const relativeTrigger = this.getSubtitleFromKey(he.triggerKey);
                    const relativeTarget = he.target;
                    const fullTargetSelector = `${baseSelector} ${relativeTarget}`;
                    let initialHasStyles = getTransition(he.styles);
                    if (he.styles.overflowHidden) {
                         initialHasStyles += ` overflow: hidden !important;`;
                    }
                    if (he.styles.perspectiveEnabled) {
                        initialHasStyles += ` perspective: ${he.styles.perspectiveValue || 1000}px;`;
                    }
                    effectCss += `${fullTargetSelector} { ${initialHasStyles} }\n`;
                    effectCss += `${baseSelector}:has(${relativeTrigger}:hover) ${relativeTarget} { ${hasStyles} }\n`;
                }
            });
        }
        if (effect.disableOnMobile) {
            finalCss += `@media (hover:hover) {\n${effectCss}}\n`;
        } else {
            finalCss += effectCss;
        }
    });
    return finalCss;
},





startHasEffectWorkflow() {
    const parentNode = this.getDomNodeForKey('parent');
    if (!parentNode) return;
    this.showHasTriggerModal((triggerKey) => {
        if (!triggerKey) return;
        this.showSelectorModal('–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –¶–ï–õ–¨ (—á—Ç–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å)', parentNode, (selectedTargets) => {
            if (selectedTargets.length === 0) return;
            const effects = this.allEffects[this.activeParentSelector];
            if (!effects._hasEffects) effects._hasEffects = [];
            const parentParts = this.activeParentSelector.split(' ').filter(Boolean);
            let lastCreatedIndex = -1; // –ó–∞–ø–æ–º–Ω–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            selectedTargets.forEach(targetSelector => {
                const childParts = targetSelector.split(' ').filter(Boolean);
                let relativeParts = [...childParts];
                for (let i = 0; i < parentParts.length; i++) {
                    if (relativeParts.length > 0 && relativeParts[0] === parentParts[i]) {
                        relativeParts.shift();
                    } else {
                        relativeParts = [childParts.pop()];
                        break;
                    }
                }
                const relativeTarget = relativeParts.join(' ').trim();
                if (relativeTarget) {
                    effects._hasEffects.push({
                        triggerKey: triggerKey,
                        target: relativeTarget,
                        styles: this.getDefaultState()
                    });
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
                    lastCreatedIndex = effects._hasEffects.length - 1;
                }
            });
            this.buildEffectTree(parentNode);
            // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò :has ---
            if (lastCreatedIndex !== -1) {
                const newHasKey = `_has:${lastCreatedIndex}`;
                const newHasTab = this.els.elementsTabs.querySelector(`[data-key="${newHasKey}"]`);
                if (newHasTab) {
                    newHasTab.click();
                }
            }
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
            this.generateAndApplyCSS();
        }, { singleSelection: false, confirmText: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º', allowParentSelection: true });
    });
},
// –ó–ê–ú–ï–ù–ò –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ showHasTriggerModal –ù–ê –≠–¢–£
showHasTriggerModal(onConfirm) {
    const effects = this.allEffects[this.activeParentSelector];
    const parentState = effects.parent;
    let listItems = '';
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å–ª–æ–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞
    const findChildren = (state, keyPrefix) => {
        if (!state.children) return;
        for (const childKey in state.children) {
            const fullKey = `${keyPrefix}|child:${childKey}`;
            listItems += `
                <div class="dbm-modal-list-item can-apply" data-key="${fullKey}">
                    ${this.cleanSelectorForDisplay(childKey)}
                </div>`;
            findChildren(state.children[childKey], fullKey);
        }
    };
    findChildren(parentState, 'parent');
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content">
                <div class="dbm-modal-header">
                <h4>–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–π Hover-—ç—Ñ—Ñ–µ–∫—Ç</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <div class="dbm-modal-list">${listItems}</div>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>`;
    this.els.panelOverlay.classList.add('visible');
    this.els.panelOverlay.querySelectorAll('.dbm-modal-list-item').forEach(item => {
        item.onclick = () => {
            // –í–æ—Ç –∑–¥–µ—Å—å –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:
            onConfirm(item.dataset.key); // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫
                  // this.removeModal();            // <--- –≠–¢–ê –°–¢–†–û–ö–ê –£–î–ê–õ–ï–ù–ê
        };
    });
    this.els.panelOverlay.querySelector('#modal-cancel-btn').onclick = () => this.removeModal();
},




        loadUserPresets() { this.userPresets = JSON.parse(localStorage.getItem(this.STORAGE_KEY)) || []; },
        saveUserPresets() { localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.userPresets)); },


        showCreatePresetModal() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
    const stylesToSave = this.getCurrentStateForKey(this.activeKey);
    
    // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –µ–≥–æ –≤ –ø—Ä–µ—Å–µ—Ç–µ
    delete stylesToSave._appliedPreset;

            const isEditMode = this.activeParentSelector.startsWith('__PRESET_EDIT_MODE__');
            const presetName = isEditMode ? this.activeParentSelector.slice(20) : '';

            this.els.panelOverlay.innerHTML = `
    <div class="dbm-modal-content-wrapper">
        <div class="dbm-modal-content">
            <div class="dbm-modal-header">
                    <h4>${isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç'}</h4>
                <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
            </div>
            <div class="dbm-modal-body">
                    <div class="dbm-form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</label>
                        <input type="text" id="preset-name-input" value="${presetName}" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, '–ü–ª–∞–≤–Ω—ã–π –ø–æ–¥—ä–µ–º'">
                    </div>
                    </div>
            <div class="dbm-modal-footer">
                <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                <button id="dbm-modal-confirm-btn" class="dbm-btn dbm-btn-primary">${isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}</button>
                </div>
        </div>
            </div>`;

            this.els.panelOverlay.classList.add('visible');

    const confirmBtn = this.els.panelOverlay.querySelector('#dbm-modal-confirm-btn');
    const cancelBtn = this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn'); 
            const nameInput = this.els.panelOverlay.querySelector('#preset-name-input');
            nameInput.focus();

            const onConfirm = () => {
                const newName = nameInput.value.trim();
                if (!newName) return;

        const newPreset = { name: newName, styles: stylesToSave };
                
        const existingIndex = this.userPresets.findIndex(p => p.name === newName);

                    if (existingIndex !== -1) {
            if(!isEditMode || this.userPresets[existingIndex].name !== presetName) {
                        this.showModalPrompt("–û—à–∏–±–∫–∞", "–ü—Ä–µ—Å–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", null, false, 'OK', true);
                        return;
            }
            this.userPresets[existingIndex] = newPreset;
        } else {
            this.userPresets.push(newPreset);
                }

                this.saveUserPresets();
                this.removeModal();

                if (isEditMode) {
            this.dbmShowManagerView();
                } else {
                    this.hasUnsavedChanges = false;
                    this.updatePresetButtonVisibility();
            const targetState = this._getStateObjectRef(this.activeKey);
            if (targetState) {
                targetState._appliedPreset = newName;
            }
                    this.updatePresetIndicatorUI();
                }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            this.addModalCloseListeners(() => this.removeModal());

            confirmBtn.onclick = onConfirm;

    if (cancelBtn) {
        cancelBtn.onclick = () => this.removeModal();
    }
        },


        showPresetsManagerModal(options = {}) {
            const { context = 'apply' } = options;
            const isApplyContext = context === 'apply';
            const createList = (title, presets, isUser) => {
                if (Object.keys(presets).length === 0 && (!isUser || presets.length === 0)) return '';
                
                const listItems = Object.entries(presets).map(([key, data]) => {
                    const presetName = isUser ? data.name : key;
                    return `<div class="dbm-modal-list-item ${isApplyContext ? 'can-apply' : ''}" data-name="${presetName}" data-user="${isUser}">
                                <div class="dbm-modal-list-item-info">${presetName}</div>
                                ${!isApplyContext && isUser ? `<div class="dbm-effect-item-actions">
                            <button class="dbm-btn-icon dbm-btn-secondary edit-preset-btn"><lord-icon src="https://cdn.lordicon.com/pflszmr5.json" trigger="hover" style="width:20px;height:20px"></lord-icon></button>
                                    <button class="dbm-btn-icon dbm-btn-secondary delete-preset-btn">${window.SuperSelectionManager?.ICONS?.trash || ''}</button>
                        </div>` : ''}
                    </div>`;
                }).join('');
                return `<h4>${title}</h4><div class="dbm-modal-list">${listItems}</div>`;
            };

            const modalContent = `
                <div class="dbm-modal-content-wrapper">
                    <div class="dbm-modal-content">
                        <div class="dbm-modal-header">
                            <h4>${isApplyContext ? '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏'}</h4>
                            <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                        </div>
                        <div class="dbm-modal-body">
                    ${createList('–í–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã', this.userPresets, true)}
                    ${createList('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã', this.DEFAULT_PRESETS, false)}
                </div>
                        <div class="dbm-modal-footer">
                            <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
            </div>`;
            this.els.panelOverlay.innerHTML = modalContent;
            this.els.panelOverlay.classList.add('visible');

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            this.addModalCloseListeners(() => this.removeModal());

            this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn').onclick = () => this.removeModal();

            if (isApplyContext) {
                this.els.panelOverlay.querySelectorAll('.dbm-modal-list-item.can-apply').forEach(item => {
                    item.onclick = () => {
                        this.applyPreset(item.dataset.name, item.dataset.user === 'true');
                        this.removeModal();
                    };
                });
            } else {
                this.els.panelOverlay.querySelectorAll('.edit-preset-btn').forEach(btn => {
                    btn.onclick = (e) => {
                        const name = e.currentTarget.closest('.dbm-modal-list-item').dataset.name;
                        const preset = this.userPresets.find(p => p.name === name);
                        if (preset) {
                            const editKey = `__PRESET_EDIT_MODE__${name}`;
                            this.allEffects[editKey] = JSON.parse(JSON.stringify(preset.styles));
                            this.removeModal();
                            this.dbmShowEditorView(editKey, { isPresetEdit: true, presetName: name });
                        }
                    };
                });
                this.els.panelOverlay.querySelectorAll('.delete-preset-btn').forEach(btn => {
                    btn.onclick = async (e) => {
                        const name = e.currentTarget.closest('.dbm-modal-list-item').dataset.name;
                        if (await this.showModalConfirm("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç?", `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç <strong>${name}</strong>?`)) {
                            this.userPresets = this.userPresets.filter(p => p.name !== name);
                            this.saveUserPresets();
                            this.removeModal();
                            this.showPresetsManagerModal({ context: 'manage' });
                        }
                    };
                });
            }
        },

updateDynamicButtons() {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
    const hasAnyEffects = Object.keys(this.allEffects).filter(key => !key.startsWith('__')).length > 0;
    if (this.els.copyCodeBtn) {
        this.els.copyCodeBtn.classList.toggle('visible', hasAnyEffects);
            }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç"
    if (this.els.createPresetBtn) {
        const isInEditor = !this.els.editorView.classList.contains('hidden');
        this.els.createPresetBtn.classList.toggle('visible', this.hasUnsavedChanges && isInEditor);
    }
        },


        applyPreset(name, isUser) {
    const presetSource = isUser ? this.userPresets : this.DEFAULT_PRESETS;
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ—Å–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
    const preset = presetSource[name] || (isUser ? presetSource.find(p => p.name === name) : null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ—Å–µ—Ç –Ω–∞–π–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º styles)
    if (!preset || !preset.styles) {
        console.error("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:", name);
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —Å—Ç–∏–ª–µ–π –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –ê–ö–¢–ò–í–ù–û–ì–û –°–õ–û–Ø –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    const targetStateObject = this._getStateObjectRef(this.activeKey);
    if (!targetStateObject) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞.");
        return;
    }

    // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê:
    // –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Å—Ç–∏–ª–∏ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ª–æ—é.
    // Object.assign() –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç: –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ.
    Object.assign(targetStateObject, JSON.parse(JSON.stringify(preset.styles)));

    // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –≤ UI, —á—Ç–æ –ø—Ä–µ—Å–µ—Ç –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
    targetStateObject._appliedPreset = name;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –≤ –ø–∞–Ω–µ–ª–∏
                this.generateAndApplyCSS();
    this.loadStateIntoControls(this.activeKey); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã (–∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏)
    this.updatePresetIndicatorUI();
},

           _getStateObjectRef(key = this.activeKey) {
            const effects = this.allEffects[this.activeParentSelector];
               if (!effects) return null;
               if (key.startsWith('_has:')) {
                   const hasEffect = effects._hasEffects[parseInt(key.slice(5), 10)];
                   return hasEffect ? hasEffect.styles : null;
               }
               let currentState = effects.parent;
               if (key === 'parent') {
                   return currentState;
               }
               const keyParts = key.split('|');
               for (let i = 1; i < keyParts.length; i++) {
                   const part = keyParts[i];
                   if (part.startsWith('child:')) {
                       const childSel = part.slice(6);
                       if (currentState && currentState.children && currentState.children[childSel]) {
                           currentState = currentState.children[childSel];
                       } else {
                           return null; 
                       }
                   }
               }
               return currentState;
           },

        resetPreset() {
               // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è.
               const targetState = this._getStateObjectRef(this.activeKey);
               if (targetState && targetState._appliedPreset) {
                   // –£–¥–∞–ª—è–µ–º "—Å—Ç–∏–∫–µ—Ä" —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è.
                   delete targetState._appliedPreset;
                   // –û–±–Ω–æ–≤–ª—è–µ–º UI, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ–π.
                this.updatePresetIndicatorUI();
            }
        },
        updatePresetIndicatorUI() {
               // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ê–ö–¢–ò–í–ù–û–ì–û —Å–ª–æ—è, –∞ –Ω–µ –¥–ª—è –≤—Å–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.
               const currentState = this.getCurrentStateForKey(this.activeKey);
            const container = this.els.presetIndicatorContainer;

               // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è.
               if (currentState && currentState._appliedPreset) {
                   container.innerHTML = `<div id="dbm-preset-indicator"><span>–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: <strong>${currentState._appliedPreset}</strong></span><button id="dbm-reset-preset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button></div>`;
                container.querySelector('#dbm-reset-preset-btn').onclick = () => this.resetPreset();
            } else {
                container.innerHTML = '';
            }
        },
        clearAllOverlays() {
           document.querySelectorAll('.dbm-currently-editing-element').forEach(el => el.classList.remove('dbm-currently-editing-element'));
        },
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        addModalCloseListeners(onClose) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            this.els.panelOverlay.onclick = null;
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É √ó
            const closeBtn = this.els.panelOverlay.querySelector('.dbm-modal-close-btn');
            if (closeBtn) {
                closeBtn.onclick = () => onClose(false);
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            this.els.panelOverlay.onclick = (e) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –∏–º–µ–Ω–Ω–æ –Ω–∞ overlay, –∞ –Ω–µ –Ω–∞ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (e.target === this.els.panelOverlay) {
                    onClose(false);
                }
            };
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const modalContent = this.els.panelOverlay.querySelector('.dbm-modal-content');
            if (modalContent) {
                modalContent.onclick = (e) => {
                    e.stopPropagation();
                };
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ dbmInitEventListeners)
        },
        setupColorPicker(wrapper) {
            const textInput = wrapper.querySelector('input[type="text"]');
            const colorInput = wrapper.querySelector('input[type="color"]');
            if (!textInput || !colorInput) return;
            const sync = (from, to) => {
                to.value = from.value;
                to.dispatchEvent(new Event('input', { bubbles: true }));
            };
            textInput.addEventListener('input', () => {
                colorInput.value = textInput.value;
            });
            colorInput.addEventListener('input', () => sync(colorInput, textInput));
        },
        setupEasingControls(container) {
            const presets = container.querySelectorAll('.dbm-easing-preset');
            const customInputs = container.querySelector('#dbm-custom-bezier-inputs');
            presets.forEach(btn => {
                btn.addEventListener('click', () => {
                    presets.forEach(p => p.classList.remove('active'));
                    btn.classList.add('active');
                    const easing = btn.dataset.easing;
                    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω–ø—É—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
                    customInputs.classList.remove('active');
                    if (easing === 'custom') {
                        // –í–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –∏–Ω–ø—É—Ç–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à –Ω–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
                        this.showBezierEditorModal();
                    } else {
                       this.dbmUpdateState(this.activeKey, 'easing', easing);
                    }
                });
            });
        },
            // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –í –í–ê–® –ö–û–î
getRelativeSelector(childElement, parentElement) {
   if (!childElement || !parentElement) return '';

   // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±–µ–Ω–∫–∞
   const parentSelector = this.getUniqueSelector(parentElement);
   const childSelector = this.getUniqueSelector(childElement);

   // –°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å:
   // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∑–∞–µ–º —ç—Ç—É —á–∞—Å—Ç—å.
   if (childSelector.startsWith(parentSelector)) {
       return childSelector.substring(parentSelector.length).trim();
   }

   // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π),
   // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é —á–∞—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞.
   return childSelector.split(' ').pop();
},
        // –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ getGroupPropsHTML
        getGroupPropsHTML(groupName) {
            const groupData = {
                'animation': `<div class="dbm-form-group"><label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (ms)</label><input type="number" data-prop="duration" step="50" class="!text-left"></div><div class="dbm-form-group"><label>–ü–ª–∞–≤–Ω–æ—Å—Ç—å</label><div class="dbm-easing-presets"><button class="dbm-easing-preset" data-easing="ease">Ease</button><button class="dbm-easing-preset" data-easing="ease-in-out">Ease-In-Out</button><button class="dbm-easing-preset" data-easing="ease-in">Ease-In</button><button class="dbm-easing-preset" data-easing="ease-out">Ease-Out</button><button class="dbm-easing-preset" data-easing="linear">Linear</button><button class="dbm-easing-preset" data-easing="custom">Custom</button></div><div id="dbm-custom-bezier-inputs" class="dbm-grid-4"><input type="number" step="0.01" min="0" max="1" data-prop="bezier1" placeholder="x1"><input type="number" step="0.01" min="-1" max="2" data-prop="bezier2" placeholder="y1"><input type="number" step="0.01" min="0" max="1" data-prop="bezier3" placeholder="x2"><input type="number" step="0.01" min="-1" max="2" data-prop="bezier4" placeholder="y2"></div></div>`,
                
                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–û–±—Ä–µ–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                'transform': `<div class="dbm-form-group"><label>–°–¥–≤–∏–≥ X/Y (px)</label><div class="dbm-grid-2"><input type="number" data-prop="translateX" placeholder="X"><input type="number" data-prop="translateY" placeholder="Y"></div></div><div class="dbm-form-group"><label>–ò—Å–∫–∞–∂–µ–Ω–∏–µ X/Y (deg)</label><div class="dbm-grid-2"><input type="number" data-prop="skewX" placeholder="X"><input type="number" data-prop="skewY" placeholder="Y"></div></div><div class="dbm-form-group"><label>–ú–∞—Å—à—Ç–∞–± X/Y</label><div class="dbm-grid-2"><input type="number" step="0.01" data-prop="scaleX" placeholder="X"><input type="number" step="0.01" data-prop="scaleY" placeholder="Y"></div></div><div class="dbm-form-group"><label>–ü–æ–≤–æ—Ä–æ—Ç X/Y/Z (deg)</label><div class="dbm-grid-2" style="grid-template-columns: repeat(3, 1fr);"><input type="number" data-prop="rotateX" placeholder="X"><input type="number" data-prop="rotateY" placeholder="Y"><input type="number" data-prop="rotateZ" placeholder="Z"></div></div><div class="dbm-subsection"><div class="dbm-form-group"><label style="display: flex; justify-content: space-between; align-items: center; width: 100%;"><span>–û–±—Ä–µ–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</span><label class="dbm-switch"><input type="checkbox" data-prop="overflowHidden"><span class="dbm-slider"></span></label></label></div><div class="dbm-form-group"><label style="display: flex; justify-content: space-between; align-items: center; width: 100%;"><span>–í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É</span><label class="dbm-switch"><input type="checkbox" data-prop="perspectiveEnabled"><span class="dbm-slider"></span></label></label></div><div class="dbm-form-group" id="perspective-value-group" style="display: none;"><label>–°–∏–ª–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã (px)</label><input type="number" data-prop="perspectiveValue" step="50" class="!text-left"></div></div>`,
                
                'style': `<div class="dbm-form-group"><label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0-1)</label><input type="number" step="0.1" max="1" min="0" data-prop="opacity" class="!text-left"></div><div class="dbm-subsection"><div class="dbm-form-group"><label>–¢–∏–ø —Ñ–æ–Ω–∞</label><div class="dbm-easing-presets" id="background-type-selector"><button class="dbm-easing-preset" data-bg-type="solid">–°–ø–ª–æ—à–Ω–æ–π</button><button class="dbm-easing-preset" data-bg-type="gradient">–ì—Ä–∞–¥–∏–µ–Ω—Ç</button></div></div><div id="solid-color-controls"><div class="dbm-form-group"><label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="backgroundColor"><input type="color" data-color-for="backgroundColor"></div></div></div><div id="gradient-controls" class="hidden"><div class="dbm-form-group"><label>–¢–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</label><div class="dbm-easing-presets" id="gradient-type-selector"><button class="dbm-easing-preset" data-grad-type="linear">–õ–∏–Ω–µ–π–Ω—ã–π</button><button class="dbm-easing-preset" data-grad-type="radial">–†–∞–¥–∏–∞–ª—å–Ω—ã–π</button></div></div><div class="dbm-form-group" id="gradient-angle-control"><label>–£–≥–æ–ª (deg)</label><input type="number" data-prop="gradientAngle"></div><div class="dbm-grid-2"><div class="dbm-form-group"><label>–¶–≤–µ—Ç 1</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="gradientColor1"><input type="color" data-color-for="gradientColor1"></div></div><div class="dbm-form-group"><label>–¶–≤–µ—Ç 2</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="gradientColor2"><input type="color" data-color-for="gradientColor2"></div></div></div></div></div>`,
                
                'text': `<div class="dbm-grid-2"><div class="dbm-form-group"><label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="color"><input type="color" data-color-for="color"></div></div><div class="dbm-form-group"><label>–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å</label><input type="number" step="100" min="100" max="900" data-prop="fontWeight" class="!text-left"></div></div><div class="dbm-grid-2"><div class="dbm-form-group"><label>–†–∞–∑–º–µ—Ä (px)</label><input type="number" data-prop="fontSize" class="!text-left"></div><div class="dbm-form-group"><label>–ú–µ–∂–±—É–∫–≤. (px)</label><input type="number" step="0.1" data-prop="letterSpacing" class="!text-left"></div></div><div class="dbm-form-group"><label>–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç.</label><input type="number" step="0.1" data-prop="lineHeight" class="!text-left"></div><div class="dbm-subsection"><div class="dbm-grid-2"><div class="dbm-form-group"><label>–õ–∏–Ω–∏—è</label><select data-prop="textDecorationLine"><option value="none">–ù–µ—Ç</option><option value="underline">–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç–∞—è</option><option value="overline">–ù–∞–¥—á–µ—Ä–∫–Ω—É—Ç–∞—è</option><option value="line-through">–ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è</option></select></div><div class="dbm-form-group"><label>–°—Ç–∏–ª—å –ª–∏–Ω–∏–∏</label><select data-prop="textDecorationStyle"><option value="solid">–°–ø–ª–æ—à–Ω–∞—è</option><option value="wavy">–í–æ–ª–Ω–∏—Å—Ç–∞—è</option><option value="dotted">–¢–æ—á–∫–∞–º–∏</option><option value="dashed">–ü—É–Ω–∫—Ç–∏—Ä</option><option value="double">–î–≤–æ–π–Ω–∞—è</option></select></div></div><div class="dbm-form-group"><label>–¶–≤–µ—Ç –ª–∏–Ω–∏–∏</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="textDecorationColor"><input type="color" data-color-for="textDecorationColor"></div></div></div>`,
                
                'marginPadding': `<div class="dbm-subsection"><h4 style="font-size: 1rem; margin-bottom: 12px;">–í–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (Margin)</h4><div class="dbm-grid-4"><div class="dbm-form-group"><label>Top</label><input type="text" data-prop="marginTop"></div><div class="dbm-form-group"><label>Right</label><input type="text" data-prop="marginRight"></div><div class="dbm-form-group"><label>Bottom</label><input type="text" data-prop="marginBottom"></div><div class="dbm-form-group"><label>Left</label><input type="text" data-prop="marginLeft"></div></div></div><div class="dbm-subsection"><h4 style="font-size: 1rem; margin-bottom: 12px;">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (Padding)</h4><div class="dbm-grid-4"><div class="dbm-form-group"><label>Top</label><input type="text" data-prop="paddingTop"></div><div class="dbm-form-group"><label>Right</label><input type="text" data-prop="paddingRight"></div><div class="dbm-form-group"><label>Bottom</label><input type="text" data-prop="paddingBottom"></div><div class="dbm-form-group"><label>Left</label><input type="text" data-prop="paddingLeft"></div></div></div>`,
                
                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–û–±—Ä–µ–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                'border': `<div class="dbm-subsection"><h4 style="font-size: 1rem; margin-bottom: 12px;">–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ (px)</h4><div class="dbm-grid-4"><div class="dbm-form-group"><label>‚ó∞</label><input type="text" data-prop="borderTopLeftRadius"></div><div class="dbm-form-group"><label>‚ó≥</label><input type="text" data-prop="borderTopRightRadius"></div><div class="dbm-form-group"><label>‚ó≤</label><input type="text" data-prop="borderBottomRightRadius"></div><div class="dbm-form-group"><label>‚ó±</label><input type="text" data-prop="borderBottomLeftRadius"></div></div></div><div class="dbm-subsection"><div class="dbm-form-group"><label style="display: flex; justify-content: space-between; align-items: center; width: 100%;"><span>–û–±—Ä–µ–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</span><label class="dbm-switch"><input type="checkbox" data-prop="overflowHidden"><span class="dbm-slider"></span></label></label></div></div>`,
                
                'boxShadow': `<div class="dbm-form-group"><label style="display: flex; justify-content: space-between; align-items: center; width: 100%;"><span>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–Ω—å</span><label class="dbm-switch"><input type="checkbox" data-prop="boxShadowInset"><span class="dbm-slider"></span></label></label></div><div class="dbm-grid-4"><div class="dbm-form-group"><label>X</label><input type="number" data-prop="boxShadowX"></div><div class="dbm-form-group"><label>Y</label><input type="number" data-prop="boxShadowY"></div><div class="dbm-form-group"><label>Blur</label><input type="number" data-prop="boxShadowBlur"></div><div class="dbm-form-group"><label>Spread</label><input type="number" data-prop="boxShadowSpread"></div></div><div class="dbm-form-group"><label>–¶–≤–µ—Ç —Ç–µ–Ω–∏</label><div class="dbm-color-input-wrapper"><input type="text" data-prop="boxShadowColor"><input type="color" data-color-for="boxShadowColor"></div></div>`,
                
                'filter': `<div class="dbm-subsection"><h4 style="font-size: 1rem; margin-bottom: 12px;">Filter</h4><div class="dbm-form-group"><label>–†–∞–∑–º—ã—Ç–∏–µ (px)</label><input type="number" step="0.1" min="0" data-prop="blur"></div><div class="dbm-grid-2"><div class="dbm-form-group"><label>–Ø—Ä–∫–æ—Å—Ç—å</label><input type="number" step="0.1" min="0" data-prop="brightness"></div><div class="dbm-form-group"><label>–ö–æ–Ω—Ç—Ä–∞—Å—Ç</label><input type="number" step="0.1" min="0" data-prop="contrast"></div></div><div class="dbm-grid-2"><div class="dbm-form-group"><label>–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å</label><input type="number" step="0.1" min="0" data-prop="saturate"></div><div class="dbm-form-group"><label>–û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ</label><input type="number" step="0.1" min="0" max="1" data-prop="grayscale"></div></div></div><div class="dbm-subsection"><h4 style="font-size: 1rem; margin-bottom: 12px;">Backdrop Filter</h4><div class="dbm-form-group"><label>–†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞ (px)</label><input type="number" step="1" min="0" data-prop="backdropBlur"></div></div>`,
            };
            return groupData[groupName] || '';
        },
// –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ showPropsEditModal
showPropsEditModal(groupName) {
    const groupTitles = { animation: '–ê–Ω–∏–º–∞—Ü–∏—è', transform: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', style: '–§–æ–Ω', text: '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞', marginPadding: '–û—Ç—Å—Ç—É–ø—ã', border: '–ì—Ä–∞–Ω–∏—Ü—ã –∏ —É–≥–ª—ã', boxShadow: '–¢–µ–Ω—å', filter: '–§–∏–ª—å—Ç—Ä—ã' };
    const propsHTML = this.getGroupPropsHTML(groupName);
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content modal-props-editor">
                <div class="dbm-modal-header">
                    <h4>${groupTitles[groupName]}</h4>
                    <div style="display: flex; align-items: center; gap: 12px;">
                        <label class="dbm-switch"><input type="checkbox" id="dbm-modal-prop-switch"><span class="dbm-slider"></span></label>
                        <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                </div>
                <div class="dbm-modal-body">${propsHTML}</div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-close-btn" class="dbm-btn dbm-btn-primary">–ì–æ—Ç–æ–≤–æ</button>
                </div>
            </div>
        </div>`;
    this.els.panelOverlay.classList.add('visible');
    this.els.panelOverlay.querySelector('#dbm-modal-close-btn').onclick = () => this.removeModal();
    const modalBody = this.els.panelOverlay.querySelector('.dbm-modal-body');
    const modalSwitch = this.els.panelOverlay.querySelector('#dbm-modal-prop-switch');
    const currentState = this.getCurrentStateForKey();
    const isEnabled = currentState[`${groupName}Enabled`] || false;
    modalSwitch.checked = isEnabled;
    modalBody.classList.toggle('disabled', !isEnabled);
    modalSwitch.addEventListener('change', () => {
       this.dbmUpdateState(this.activeKey, `${groupName}Enabled`, modalSwitch.checked);
        modalBody.classList.toggle('disabled', !modalSwitch.checked);
        const cardSwitch = document.querySelector(`.dbm-property-group-card[data-group-name="${groupName}"] [data-switch]`);
        if(cardSwitch) {
            cardSwitch.checked = modalSwitch.checked;
            cardSwitch.closest('.dbm-property-group-card').classList.toggle('active', modalSwitch.checked);
        }
    });
    this.loadPropsIntoModal(modalBody);
    // --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù ---
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è "–§–æ–Ω –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç"
    if (groupName === 'style') {
        const bgTypeSelector = modalBody.querySelector('#background-type-selector');
        const gradTypeSelector = modalBody.querySelector('#gradient-type-selector');
        const solidControls = modalBody.querySelector('#solid-color-controls');
        const gradientControls = modalBody.querySelector('#gradient-controls');
        const angleControl = modalBody.querySelector('#gradient-angle-control');
        const updateStyleUI = () => {
            const state = this.getCurrentStateForKey();
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            bgTypeSelector.querySelector(`[data-bg-type="${state.backgroundType}"]`).classList.add('active');
            gradTypeSelector.querySelector(`[data-grad-type="${state.gradientType}"]`).classList.add('active');
            // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤
            solidControls.classList.toggle('hidden', state.backgroundType !== 'solid');
            gradientControls.classList.toggle('hidden', state.backgroundType !== 'gradient');
            angleControl.classList.toggle('hidden', state.gradientType !== 'linear');
        };
        bgTypeSelector.querySelectorAll('button').forEach(btn => btn.addEventListener('click', () => {
            bgTypeSelector.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
           this.dbmUpdateState(this.activeKey, 'backgroundType', btn.dataset.bgType);
            updateStyleUI();
        }));
        gradTypeSelector.querySelectorAll('button').forEach(btn => btn.addEventListener('click', () => {
            gradTypeSelector.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
           this.dbmUpdateState(this.activeKey, 'gradientType', btn.dataset.gradType);
            updateStyleUI();
        }));
        updateStyleUI();
    }
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"
    if (groupName === 'transform') {
        const perspectiveSwitch = modalBody.querySelector('[data-prop="perspectiveEnabled"]');
        const perspectiveValueGroup = modalBody.querySelector('#perspective-value-group');
        const toggleValueVisibility = () => {
            perspectiveValueGroup.style.display = perspectiveSwitch.checked ? 'block' : 'none';
        };
        toggleValueVisibility(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        perspectiveSwitch.addEventListener('change', toggleValueVisibility);
    }
},
        getCurrentStateForKey(key = this.activeKey) {
            const effects = this.allEffects[this.activeParentSelector];
            if (!effects) return this.getDefaultState();
            if (key.startsWith('_has:')) {
                const hasEffect = effects._hasEffects[parseInt(key.slice(5), 10)];
                return { ...this.getDefaultState(), ...(hasEffect ? hasEffect.styles : {}) };
            }
            let currentState = effects.parent;
            const keyParts = key.split('|');
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—É—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—ç—Ç–æ 'parent' –∏–ª–∏ 'child:...')
            for (let i = 1; i < keyParts.length; i++) {
                const part = keyParts[i];
                if (part.startsWith('child:')) {
                    const childSel = part.slice(6);
                    if (currentState && currentState.children && currentState.children[childSel]) {
                        currentState = currentState.children[childSel];
                    } else {
                        return this.getDefaultState(); // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç
                    }
                }
            }
            return { ...this.getDefaultState(), ...currentState };
            },

       _getStateObjectRef(key = this.activeKey) {
           const effects = this.allEffects[this.activeParentSelector];
           if (!effects) return null;
           if (key.startsWith('_has:')) {
               const hasEffect = effects._hasEffects[parseInt(key.slice(5), 10)];
               return hasEffect ? hasEffect.styles : null;
           }
           let currentState = effects.parent;
           if (key === 'parent') {
               return currentState;
           }
           const keyParts = key.split('|');
           for (let i = 1; i < keyParts.length; i++) {
               const part = keyParts[i];
               if (part.startsWith('child:')) {
                   const childSel = part.slice(6);
                   if (currentState && currentState.children && currentState.children[childSel]) {
                       currentState = currentState.children[childSel];
                   } else {
                       return null; 
                   }
               }
           }
           return currentState;
        },

loadPropsIntoModal(modalBody) {
    const state = this.getCurrentStateForKey();
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∏–Ω–ø—É—Ç—ã
    modalBody.querySelectorAll('[data-prop]').forEach(input => {
        const prop = input.dataset.prop;
        if (state[prop] !== undefined) {
            input.value = state[prop];
        }
        input.addEventListener('input', () => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ
            const value = (input.type === 'number') ? parseFloat(input.value) : input.value;
           this.dbmUpdateState(this.activeKey, prop, input.type === 'checkbox' ? input.checked : value);
        });
    });
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–ø—É—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    modalBody.querySelectorAll('input[type="color"]').forEach(colorInput => {
        const propName = colorInput.dataset.colorFor;
        const textInput = modalBody.querySelector(`[data-prop="${propName}"]`);
        if (textInput) {
            colorInput.value = textInput.value || '#000000';
            colorInput.addEventListener('input', () => {
                textInput.value = colorInput.value;
                textInput.dispatchEvent(new Event('input', { bubbles: true }));
            });
            textInput.addEventListener('input', () => {
                try { colorInput.value = textInput.value; } catch (e) { /* ignore */ }
            });
        }
    });
    // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–õ–ê–í–ù–û–°–¢–ò ---
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    if (modalBody.querySelector('.dbm-easing-presets')) {
        this.setupEasingControls(modalBody);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const currentEasing = state.easing || 'ease';
        const activeButton = modalBody.querySelector(`.dbm-easing-preset[data-easing="${currentEasing}"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        const customInputs = modalBody.querySelector('#dbm-custom-bezier-inputs');
        if (customInputs) {
            customInputs.classList.toggle('active', currentEasing === 'custom');
        }
    }
},
    updateEffectCountInCards() {
            const state = this.getCurrentStateForKey();
    if (!state) return;
    const effectCounts = {
        transform: 0,
        style: 0,
        text: 0,
        border: 0,
        boxShadow: 0,
        animation: 0,
        filter: 0,
        marginPadding: 0
    };
    if (state.animationEnabled) {
        effectCounts.animation++;
            }
            if (state.transformEnabled) {
                if (state.translateX != 0 || state.translateY != 0) effectCounts.transform++;
                if (state.scaleX != 1 || state.scaleY != 1) effectCounts.transform++;
                if (state.skewX != 0 || state.skewY != 0) effectCounts.transform++;
                if (state.rotateX != 0 || state.rotateY != 0 || state.rotateZ != 0) effectCounts.transform++;
            }
            if (state.styleEnabled) {
        if (state.opacity != 1 && state.opacity !== undefined) effectCounts.style++;
        if (state.backgroundColor || state.backgroundType === 'gradient') effectCounts.style++;
            }
            if (state.textEnabled) {
                if (state.color) effectCounts.text++;
                if (state.fontSize) effectCounts.text++;
                if (state.fontWeight) effectCounts.text++;
            }
    if (state.borderEnabled) {
        if (state.borderTopLeftRadius || state.borderTopRightRadius || state.borderBottomLeftRadius || state.borderBottomRightRadius) effectCounts.border++;
        if (state.borderWidth) effectCounts.border++;
    }
            if (state.boxShadowEnabled) effectCounts.boxShadow++;
    if (state.filterEnabled) {
        if (state.blur > 0 || state.brightness != 1 || state.contrast != 1 || state.saturate != 1 || state.grayscale > 0 || state.backdropBlur > 0) effectCounts.filter++;
    }
    if (state.marginPaddingEnabled) {
        if(state.marginTop || state.marginRight || state.marginBottom || state.marginLeft || state.paddingTop || state.paddingRight || state.paddingBottom || state.paddingLeft) effectCounts.marginPadding++;
    }

    document.querySelectorAll('.dbm-property-group-card').forEach(card => {
                const groupName = card.dataset.groupName;
                const count = effectCounts[groupName] || 0;
                const text = count === 1 ? `${count} —ç—Ñ—Ñ–µ–∫—Ç` : (count > 1 && count < 5 ? `${count} —ç—Ñ—Ñ–µ–∫—Ç–∞` : `${count} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å `dbm-`
        const countElement = card.querySelector('.dbm-card-effect-count');
        if (countElement) {
            countElement.textContent = text;
        }
            });
        },
showBezierEditorModal() {
    const currentState = this.getCurrentStateForKey();
    const initialValues = {
        x1: parseFloat(currentState.bezier1 || 0.25),
        y1: parseFloat(currentState.bezier2 || 0.1),
        x2: parseFloat(currentState.bezier3 || 0.25),
        y2: parseFloat(currentState.bezier4 || 1.0)
    };

    const modalHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content" style="max-width: 600px;">
                <div class="dbm-modal-header">
                <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body" style="display: flex; gap: 24px; align-items: stretch;">
                    <div style="flex-basis: 50%;">
                        <div class="dbm-form-group">
                            <label>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</label>
                            <div class="dbm-grid-2">
                                <input type="number" step="0.01" min="0" max="1" id="bezier-x1" title="X1">
                                <input type="number" step="0.01" id="bezier-y1" title="Y1">
                                <input type="number" step="0.01" min="0" max="1" id="bezier-x2" title="X2">
                                <input type="number" step="0.01" id="bezier-y2" title="Y2">
                            </div>
                        </div>
                        <div class="dbm-form-group">
                           <label style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                               <span>–ü—Ä–µ–≤—å—é –∞–Ω–∏–º–∞—Ü–∏–∏</span>
                               <button id="bezier-play-btn" class="dbm-btn-icon dbm-btn-secondary" title="–ü—Ä–æ–∏–≥—Ä–∞—Ç—å">
                                                                            ${window.SuperSelectionManager?.ICONS?.play || '‚ñ∂Ô∏è'}
                               </button>
                           </label>
                           <div id="bezier-preview-wrapper" style="height: 40px; background: #f3f4f6; border-radius: 12px; padding: 10px;">
                               <div id="bezier-preview-ball" style="width: 20px; height: 20px; background: var(--dbm-primary-color); border-radius: 50%;"></div>
                           </div>
                        </div>
                    </div>
                    <div id="bezier-visual-editor" style="flex-basis: 50%; aspect-ratio: 1/1; background: #fff; border: 1px solid #e5e7eb; border-radius: 16px; cursor: grab; touch-action: none;">
                       <svg width="100%" height="100%" viewBox="0 0 100 100">
                           <path d="M 0 100 C 25 10, 25 100, 100 0" stroke="#ddd" fill="none" stroke-width="1" />
                           <line id="line1" x1="0" y1="100" x2="25" y2="10" stroke="#9ca3af" stroke-width="0.5" stroke-dasharray="2"/>
                           <line id="line2" x1="100" y1="0" x2="25" y2="100" stroke="#9ca3af" stroke-width="0.5" stroke-dasharray="2"/>
                           <path id="bezier-curve" d="" stroke="var(--dbm-primary-color)" stroke-width="1.5" fill="none"/>
                           <circle id="handle1" cx="25" cy="10" r="3" fill="white" stroke="var(--dbm-primary-color)" stroke-width="1" style="cursor: grab;"/>
                           <circle id="handle2" cx="25" cy="100" r="3" fill="white" stroke="var(--dbm-primary-color)" stroke-width="1" style="cursor: grab;"/>
                       </svg>
                    </div>
                </div>
                <div class="dbm-modal-footer">
                     <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                     <button id="dbm-modal-confirm-btn" class="dbm-btn dbm-btn-primary">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            </div>
            <style id="bezier-preview-style"></style>
        </div>
    `;
    this.els.panelOverlay.innerHTML = modalHTML;
    this.els.panelOverlay.classList.add('visible');

    const editor = document.getElementById('bezier-visual-editor');
    const svg = editor.querySelector('svg');
    const curve = document.getElementById('bezier-curve');
    const handle1 = document.getElementById('handle1');
    const handle2 = document.getElementById('handle2');
    const line1 = document.getElementById('line1');
    const line2 = document.getElementById('line2');
    const x1_input = document.getElementById('bezier-x1');
    const y1_input = document.getElementById('bezier-y1');
    const x2_input = document.getElementById('bezier-x2');
    const y2_input = document.getElementById('bezier-y2');
    const previewBall = document.getElementById('bezier-preview-ball');
    const previewStyle = document.getElementById('bezier-preview-style');
    const playBtn = document.getElementById('bezier-play-btn');
    let p1 = { x: 0, y: 0 }, p2 = { x: 0, y: 0 };

    const updateAll = (values, source = 'init') => {
        if (isNaN(values.x1) || isNaN(values.y1) || isNaN(values.x2) || isNaN(values.y2)) {
            return;
        }
        p1 = { x: values.x1, y: values.y1 };
        p2 = { x: values.x2, y: values.y2 };

        const svgP1 = { x: p1.x * 100, y: 100 - (p1.y * 100) };
        const svgP2 = { x: p2.x * 100, y: 100 - (p2.y * 100) };
        curve.setAttribute('d', `M 0 100 C ${svgP1.x} ${svgP1.y}, ${svgP2.x} ${svgP2.y}, 100 0`);
        handle1.setAttribute('cx', svgP1.x); handle1.setAttribute('cy', svgP1.y);
        handle2.setAttribute('cx', svgP2.x); handle2.setAttribute('cy', svgP2.y);
        line1.setAttribute('x2', svgP1.x); line1.setAttribute('y2', svgP1.y);
        line2.setAttribute('x2', svgP2.x); line2.setAttribute('y2', svgP2.y);

        if (source !== 'input') {
            x1_input.value = p1.x.toFixed(2); y1_input.value = p1.y.toFixed(2);
            x2_input.value = p2.x.toFixed(2); y2_input.value = p2.y.toFixed(2);
        }

        previewStyle.innerHTML = `
           @keyframes bezier-ball-move {
                from { transform: translateX(0px); }
                to { transform: translateX(calc(100% - 20px)); }
            }
            #bezier-preview-ball.animate {
                animation: bezier-ball-move 1.5s ${`cubic-bezier(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y})`} forwards;
            }
        `;
    };

    let activeHandle = null;
    const startDrag = (e, handle) => {
        e.preventDefault();
        activeHandle = handle;
        editor.style.cursor = 'grabbing';
        handle.style.cursor = 'grabbing';
    };
    const drag = (e) => {
        if (!activeHandle) return;
        const rect = svg.getBoundingClientRect();
        let x = (e.clientX - rect.left) / rect.width;
        let y = (e.clientY - rect.top) / rect.height;
                    x = Math.max(0, Math.min(1, x));
        const currentValues = { 
            x1: parseFloat(x1_input.value), y1: parseFloat(y1_input.value),
            x2: parseFloat(x2_input.value), y2: parseFloat(y2_input.value)
        };
        if (activeHandle === handle1) {
            currentValues.x1 = x;
            currentValues.y1 = 1 - y;
        } else {
            currentValues.x2 = x;
            currentValues.y2 = 1 - y;
        }
        updateAll(currentValues, 'drag');
    };
    const endDrag = () => {
        if (!activeHandle) return;
        editor.style.cursor = 'grab';
        activeHandle.style.cursor = 'grab';
        activeHandle = null;
    };
    handle1.addEventListener('mousedown', (e) => startDrag(e, handle1));
    handle2.addEventListener('mousedown', (e) => startDrag(e, handle2));
    window.addEventListener('mousemove', drag);
    window.addEventListener('mouseup', endDrag);

    [x1_input, y1_input, x2_input, y2_input].forEach(input => {
        input.addEventListener('input', () => {
            const newValues = {
                x1: parseFloat(x1_input.value || 0), y1: parseFloat(y1_input.value || 0),
                x2: parseFloat(x2_input.value || 0), y2: parseFloat(y2_input.value || 0),
            };
            updateAll(newValues, 'input');
        });
    });
    
    playBtn.addEventListener('click', () => {
        previewBall.classList.remove('animate');
                    void previewBall.offsetWidth;
        previewBall.classList.add('animate');
    });

    const cleanup = () => {
        window.removeEventListener('mousemove', drag);
        window.removeEventListener('mouseup', endDrag);
        this.removeModal();
    };
    document.getElementById('dbm-modal-confirm-btn').onclick = () => {
                    this.dbmUpdateState(this.activeKey, 'bezier1', p1.x);
                    this.dbmUpdateState(this.activeKey, 'bezier2', p1.y);
                    this.dbmUpdateState(this.activeKey, 'bezier3', p2.x);
                    this.dbmUpdateState(this.activeKey, 'bezier4', p2.y);
        cleanup();
    };
    document.getElementById('dbm-modal-cancel-btn').onclick = cleanup;
    
    updateAll(initialValues);
},   
showPerspectiveParentModal(targetElement, onConfirm) {
    if (!targetElement) return;
    const parents = [];
    let current = targetElement.parentElement;
    const blockRoot = targetElement.closest('.r.t-rec');
    // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ DOM-–¥–µ—Ä–µ–≤—É –¥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –±–ª–æ–∫–∞ Tilda
    while (current && current.contains(targetElement) && current !== blockRoot) {
        const selector = this.getUniqueSelector(current);
        if (selector) {
            parents.push(selector);
        }
        current = current.parentElement;
    }
    if (blockRoot) {
        parents.push(this.getUniqueSelector(blockRoot));
    }
    const listItemsHTML = parents.map(selector => `
        <div class="dbm-modal-list-item can-apply" data-selector="${selector.replace(/"/g, '&quot;')}">
            ${this.cleanSelectorForDisplay(selector) || "–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫"}
        </div>
    `).join('');
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content">
                <div class="dbm-modal-header">
                <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <div class="dbm-modal-list">${listItemsHTML}</div>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>
    `;
    this.els.panelOverlay.classList.add('visible');
    this.els.panelOverlay.querySelectorAll('.dbm-modal-list-item').forEach(item => {
        item.addEventListener('click', () => {
            onConfirm(item.dataset.selector);
            this.removeModal();
        });
        const elToHighlight = document.querySelector(item.dataset.selector);
        if (elToHighlight) {
           item.addEventListener('mouseenter', () => elToHighlight.classList.add('dbm-highlight-element-child'));
           item.addEventListener('mouseleave', () => elToHighlight.classList.remove('dbm-highlight-element-child'));
        }
    });
    this.els.panelOverlay.querySelector('#dbm-cancel-btn').onclick = () => this.removeModal();
},
reselectChildTarget(key) {
    const keyParts = key.split('|');
   if (keyParts.length < 2) return;
    
   const oldChildSelector = keyParts.pop().slice(6);
   const parentKey = keyParts.join('|');
    const parentDomNode = this.getDomNodeForKey(parentKey);
    if (!parentDomNode) return;
    
    this.showChildTargetModal(parentDomNode, parentKey, {
        singleSelection: true,
        confirmText: '–ó–∞–º–µ–Ω–∏—Ç—å',
       onConfirm: (newSelectedFullSelectors) => {
           if (newSelectedFullSelectors.length === 0) return;
            
           const newChildElement = document.querySelector(newSelectedFullSelectors[0]);
           // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –Ω–∞–¥–µ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
           const newChildRelativeSelector = this.getRelativeSelector(newChildElement, parentDomNode);

           if (!newChildRelativeSelector || newChildRelativeSelector === oldChildSelector) return;

           const parentState = this._getStateObjectRef(parentKey);
            if (parentState && parentState.children && parentState.children[oldChildSelector]) {
               parentState.children[newChildRelativeSelector] = parentState.children[oldChildSelector];
                delete parentState.children[oldChildSelector];
            }

            this.buildEffectTree(document.querySelector(this.activeParentSelector));
            this.generateAndApplyCSS();
        }
    });
},
reselectParentTarget() {
    const currentElement = document.querySelector(this.activeParentSelector);
    if (!currentElement) {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
        this.startSelectionMode(true);
        return;
    }
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å–æ –≤—Å–µ–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —ç—Ç–æ —Ä–∞–Ω—å—à–µ
    const hierarchyHTML = this.buildSelectorHierarchyHTML(currentElement, true);
    // 2. –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content">
                <div class="dbm-modal-header">
                <h4>–°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <div class="dbm-modal-list">${hierarchyHTML}</div>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>`;
    this.els.panelOverlay.classList.add('visible');
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    this.addHighlightEventListeners(this.els.panelOverlay.querySelector('.dbm-modal-list'));
    // 4. –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ
   this.els.panelOverlay.querySelectorAll('.dbm-selector-tag').forEach(tag => {
        tag.addEventListener('click', () => {
            const newSelector = tag.dataset.selector;
            const oldSelector = this.activeParentSelector;
            if (newSelector && newSelector !== oldSelector) {
                // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                this.allEffects[newSelector] = this.allEffects[oldSelector];
                delete this.allEffects[oldSelector];
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
               this.dbmShowEditorView(newSelector);
            }
            this.removeModal();
        });
    });
    this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn').onclick = () => {
       document.querySelectorAll('.dbm-highlight-element').forEach(el => el.classList.remove('dbm-highlight-element'));
        this.removeModal();
    };
},
reselectChildTarget(key) {
    const keyParts = key.split('|');
    if (keyParts.length < 2) return;
    const oldChildSelector = keyParts.pop().slice(6);
    const parentKey = keyParts.join('|');
    const parentDomNode = this.getDomNodeForKey(parentKey);
    if (!parentDomNode) return;
    this.showChildTargetModal(parentDomNode, parentKey, {
        singleSelection: true,
        confirmText: '–ó–∞–º–µ–Ω–∏—Ç—å',
        onConfirm: (newSelectedFullSelectors) => {
            if (newSelectedFullSelectors.length === 0) return;
            const newFullSelector = newSelectedFullSelectors[0];
            const parentSelector = this.getUniqueSelector(parentDomNode);
            const newChildRelativeSelector = newFullSelector.replace(parentSelector, '').trim();
            if (newChildRelativeSelector === oldChildSelector) return;
            const parentState = this.getCurrentStateForKey(parentKey);
            if (parentState && parentState.children && parentState.children[oldChildSelector]) {
                parentState.children[newChildRelativeSelector] = parentState.children[oldChildSelector];
                delete parentState.children[oldChildSelector];
            }
            this.buildEffectTree(document.querySelector(this.activeParentSelector));
            this.generateAndApplyCSS();
            const newFullKey = `${parentKey}|child:${newChildRelativeSelector}`;
            const newTab = this.els.elementsTabs.querySelector(`[data-key="${newFullKey}"]`);
            if (newTab) {
                newTab.click();
            }
        }
    });
},
// ‚úÖ –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ makeSelectorEditable –ù–ê –≠–¢–£
makeSelectorEditable(h2Element) {
    if (!h2Element) return;

    h2Element.style.cursor = 'pointer';
    h2Element.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä';

    h2Element.addEventListener('click', () => {
        const oldFullSelector = this.activeParentSelector;
        const oldCleanSelector = this.cleanSelectorForDisplay(oldFullSelector);

        const input = document.createElement('input');
        input.type = 'text';
        input.value = oldCleanSelector;
        input.className = 'dbm-editable-selector-input';

        h2Element.replaceWith(input);
        input.focus();
        input.select();

        const saveChanges = () => {
            const newCleanSelector = input.value.trim();
            if (newCleanSelector === oldCleanSelector || !newCleanSelector) {
                input.replaceWith(h2Element); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                return;
            }

            const blockPrefixMatch = oldFullSelector.match(/^(#rec[0-9]+|\.uc-[\w-]+)\s*/);
            const blockPrefix = blockPrefixMatch ? blockPrefixMatch[0] : '';
            const newFullSelector = blockPrefix + newCleanSelector;
            
            const oldEffectData = this.allEffects[oldFullSelector];
            if (!oldEffectData) {
                input.replaceWith(h2Element);
                return;
            }
            
            // ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞,
            // –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ.
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–µ—Ä–Ω—ã–º–∏
            // –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –Ω–æ–≤–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É.
            this.allEffects[newFullSelector] = oldEffectData;
            delete this.allEffects[oldFullSelector];
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç –≤—Å–µ –¥–µ—Ä–µ–≤–æ
            this.dbmShowEditorView(newFullSelector);
        };

        input.addEventListener('blur', saveChanges);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                saveChanges();
            } else if (e.key === 'Escape') {
                input.replaceWith(h2Element);
            }
        });
    });
},




showAIAssistantModal() {
    this.els.panelOverlay.innerHTML = `
        <div class="dbm-modal-content-wrapper">
            <div class="dbm-modal-content" style="max-width: 500px;">
                <div class="dbm-modal-header">
                    <h4>AI –ü–æ–º–æ—â–Ω–∏–∫</h4>
                    <button class="dbm-btn-icon dbm-btn-secondary dbm-modal-close-btn">√ó</button>
                </div>
                <div class="dbm-modal-body">
                    <div class="dbm-form-group">
                        <label>–û–ø–∏—à–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:</label>
                        <textarea id="dbm-ai-prompt-textarea" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ª–µ–≥–∫–∏–π –ø–æ–¥—ä–µ–º —Å —Ç–µ–Ω—å—é –∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 5 –≥—Ä–∞–¥—É—Å–æ–≤" rows="3"></textarea>
                    </div>
                    <div id="dbm-ai-status-message" style="margin: 12px 0; font-size: 14px; color: #666;"></div>
                </div>
                <div class="dbm-modal-footer">
                    <button id="dbm-modal-cancel-btn" class="dbm-btn dbm-btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                    <button id="dbm-ai-random-btn" class="dbm-btn dbm-btn-secondary">–°–ª—É—á–∞–π–Ω—ã–π</button>
                    <button id="dbm-ai-generate-btn" class="dbm-btn dbm-btn-primary">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button id="dbm-ai-apply-btn" class="dbm-btn dbm-btn-primary" disabled>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>`;
    this.els.panelOverlay.classList.add('visible');

    const promptTextarea = this.els.panelOverlay.querySelector('#dbm-ai-prompt-textarea');
    const generateBtn = this.els.panelOverlay.querySelector('#dbm-ai-generate-btn');
    const randomBtn = this.els.panelOverlay.querySelector('#dbm-ai-random-btn');
    const applyBtn = this.els.panelOverlay.querySelector('#dbm-ai-apply-btn');
    const cancelBtn = this.els.panelOverlay.querySelector('#dbm-modal-cancel-btn');
    const statusMessage = this.els.panelOverlay.querySelector('#dbm-ai-status-message');
    
    let generatedJson = null; // –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç–∞
    const targetSelector = this.activeParentSelector;
    const activeKeyForAI = this.activeKey; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞

    const cleanup = () => {
        if (this.allEffects['__AI_PREVIEW__']) {
            delete this.allEffects['__AI_PREVIEW__'];
            this.generateAndApplyCSS();
        }
        this.removeModal();
    };

    const handleGeneration = async (isRandom = false) => {
        const prompt = isRandom 
            ? '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª—É—á–∞–π–Ω—ã–π, —Å—Ç–∏–ª—å–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π hover-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ' 
            : promptTextarea.value.trim();
        if (!prompt) {
            statusMessage.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç.';
            return;
        }
        statusMessage.textContent = '–ú–∞–≥–∏—è AI –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... ‚ú®';
        generateBtn.disabled = true;
        randomBtn.disabled = true;
        applyBtn.disabled = true;
        try {
            const effectJson = await this.generateAIEffect(prompt);
            generatedJson = effectJson; // –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–π" JSON
            
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ–π - –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const previewState = this.getDefaultState();
            // –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —ç—Ç–æ –ª–∏–±–æ –æ–±—ä–µ–∫—Ç "current", –ª–∏–±–æ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –ø–ª–æ—Å–∫–∏–π
            const stylesForPreview = generatedJson.current || (generatedJson.parent ? {} : generatedJson);

            // "–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º" –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            const processAndFlatten = (source, target) => {
                 for (const key in source) {
                    if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
                        for (const subKey in source[key]) {
                            target[subKey] = source[key][subKey];
                        }
                    } else {
                        target[key] = source[key];
                    }
                }
            };
            processAndFlatten(stylesForPreview, previewState);

            this.allEffects['__AI_PREVIEW__'] = this.getDefaultEffectState();
            this.allEffects['__AI_PREVIEW__'].parent = previewState;
            this.allEffects['__AI_PREVIEW__']._targetSelector = targetSelector;

            this.generateAndApplyCSS();
            statusMessage.textContent = '–≠—Ñ—Ñ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç.';
            applyBtn.disabled = false;
        } catch (error) {
            statusMessage.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
            console.error(error);
        } finally {
            generateBtn.disabled = false;
            randomBtn.disabled = false;
        }
    };

    if (generateBtn) generateBtn.onclick = () => handleGeneration(false);
    if (randomBtn) randomBtn.onclick = () => handleGeneration(true);
    if (cancelBtn) cancelBtn.onclick = cleanup;
    
    if (applyBtn) applyBtn.onclick = () => {
        if (!generatedJson) {
            cleanup();
            return;
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∏ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –≥—Ä—É–ø–ø
        const applyStyles = (stylesObject, targetKey) => {
            if (!stylesObject || typeof stylesObject !== 'object') return;

            const targetState = this._getStateObjectRef(targetKey);
            if (!targetState) return;

            // "–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º" —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "transform": {...})
            const flattenedStyles = {};
            for (const key in stylesObject) {
                if (typeof stylesObject[key] === 'object' && stylesObject[key] !== null && !Array.isArray(stylesObject[key])) {
                    for (const subKey in stylesObject[key]) {
                        flattenedStyles[subKey] = stylesObject[key][subKey];
                    }
                } else {
                    flattenedStyles[key] = stylesObject[key];
                }
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º "—Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ" —Å—Ç–∏–ª–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–ª–æ—è
            Object.assign(targetState, flattenedStyles);
            
            // –ö–∞—Ä—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å–≤–æ–π—Å—Ç–≤
            const propToGroupMap = {
                'translateX': 'transformEnabled', 'translateY': 'transformEnabled', 'scaleX': 'transformEnabled', 'scaleY': 'transformEnabled', 'rotateX': 'transformEnabled', 'rotateY': 'transformEnabled', 'rotateZ': 'transformEnabled', 'skewX': 'transformEnabled', 'skewY': 'transformEnabled', 'perspective': 'transformEnabled',
                'opacity': 'styleEnabled', 'backgroundColor': 'styleEnabled', 'gradientColor1': 'styleEnabled',
                'color': 'textEnabled', 'fontSize': 'textEnabled', 'fontWeight': 'textEnabled', 'letterSpacing': 'textEnabled', 'lineHeight': 'textEnabled',
                'borderWidth': 'borderEnabled', 'borderRadius': 'borderEnabled', 'borderTopLeftRadius': 'borderEnabled',
                'boxShadow': 'boxShadowEnabled', 'boxShadowColor': 'boxShadowEnabled',
                'blur': 'filterEnabled', 'brightness': 'filterEnabled', 'contrast': 'filterEnabled', 'saturate': 'filterEnabled', 'grayscale': 'filterEnabled', 'backdropBlur': 'filterEnabled',
                'duration': 'animationEnabled', 'easing': 'animationEnabled'
            };

            // –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            for (const prop in flattenedStyles) {
                if (propToGroupMap[prop] && flattenedStyles[prop] !== this.getDefaultState()[prop]) {
                    targetState[propToGroupMap[prop]] = true;
                }
            }
        };

        // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è
        const currentStyles = generatedJson.current || (generatedJson.parent ? null : generatedJson);
        if (currentStyles) {
            applyStyles(currentStyles, activeKeyForAI);
        }

        // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ—è, –µ—Å–ª–∏ AI –∏—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª
        if (generatedJson.parent) {
            applyStyles(generatedJson.parent, 'parent');
        }
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.generateAndApplyCSS();
        this.loadStateIntoControls(activeKeyForAI);
        this.updatePresetIndicatorUI();
        this.hasUnsavedChanges = true;
        this.updateDynamicButtons();
        
        cleanup();
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    this.addModalCloseListeners(cleanup);
},
async generateAIEffect(prompt) {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è, –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI
    const systemPrompt = `
        You are a CSS effects generator. Your response must be ONLY a JSON object inside a markdown block.
        The user will describe a hover effect. Generate CSS properties for it.
        
        RULES:
        1.  NEVER use the 'transform' property directly. 
        2.  ALWAYS provide individual transform functions like 'translateX', 'rotateY', 'scaleX'.
        3.  If the user asks for an effect on the PARENT element (like perspective), put those styles in a "parent" object.
        4.  Put all other styles for the CURRENT element in a "current" object.
        5.  If the prompt is simple (e.g., "slight lift and shadow"), you can just return the properties at the top level.

        EXAMPLE: User prompt is "slight lift, shadow, and rotate 10 degrees".
        Your response:
        \`\`\`json
        {
            "translateY": -10,
            "rotateZ": 10,
            "boxShadow": "0 10px 20px rgba(0,0,0,0.1)"
        }
        \`\`\`
    `;

    const PROXY_URL = 'https://super-hover.vercel.app/api/generate';
    const response = await fetch(PROXY_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
             system: systemPrompt,
             prompt: prompt 
        }) 
    });

    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
    const data = await response.json();
    if (!data.candidates || !data.candidates[0]) {
         throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
    }
    const rawText = data.candidates[0].content.parts[0].text;
    const jsonMatch = rawText.match(/```json\n([\s\S]*?)\n```/);
    if (!jsonMatch || !jsonMatch[1]) {
        throw new Error('AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.');
    }
    try {
        const effectJson = JSON.parse(jsonMatch[1]);
        const newEffect = this.getDefaultEffectState();

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ transform
        const parseTransformString = (transformString) => {
            const result = {};
            const regex = /(\w+)\(([^)]+)\)/g;
            let match;
            while ((match = regex.exec(transformString)) !== null) {
                const func = match[1];
                const values = match[2].split(',').map(v => parseFloat(v.trim()));
                switch(func) {
                    case 'translateX': result.translateX = values[0]; break;
                    case 'translateY': result.translateY = values[0]; break;
                    case 'translate': result.translateX = values[0]; result.translateY = values[1] || 0; break;
                    case 'scaleX': result.scaleX = values[0]; break;
                    case 'scaleY': result.scaleY = values[0]; break;
                    case 'scale': result.scaleX = values[0]; result.scaleY = values[1] || values[0]; break;
                    case 'rotate':
                    case 'rotateZ': result.rotateZ = values[0]; break;
                    case 'rotateX': result.rotateX = values[0]; break;
                    case 'rotateY': result.rotateY = values[0]; break;
                    case 'skewX': result.skewX = values[0]; break;
                    case 'skewY': result.skewY = values[0]; break;
                    case 'skew': result.skewX = values[0]; result.skewY = values[1] || 0; break;
                }
            }
            return result;
        };
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è" –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
        const processAndFlatten = (source, target) => {
            for (const key in source) {
                if (key === 'transform' && typeof source[key] === 'string') {
                    const parsedTransforms = parseTransformString(source[key]);
                    Object.assign(target, parsedTransforms);
                } else if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
                    for (const subKey in source[key]) {
                        target[subKey] = source[key][subKey];
                    }
                } else {
                    target[key] = source[key];
                }
            }
        };

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å–≤–æ–π—Å—Ç–≤
        const checkAndEnableGroups = (stateObject) => {
            const propToGroupMap = {
                'translateX': 'transformEnabled', 'translateY': 'transformEnabled', 'scaleX': 'transformEnabled', 'scaleY': 'transformEnabled', 'rotateX': 'transformEnabled', 'rotateY': 'transformEnabled', 'rotateZ': 'transformEnabled', 'skewX': 'transformEnabled', 'skewY': 'transformEnabled', 'perspective': 'transformEnabled',
                'opacity': 'styleEnabled', 'backgroundColor': 'styleEnabled', 'gradientColor1': 'styleEnabled',
                'color': 'textEnabled', 'fontSize': 'textEnabled', 'fontWeight': 'textEnabled', 'letterSpacing': 'textEnabled', 'lineHeight': 'textEnabled',
                'borderWidth': 'borderEnabled', 'borderRadius': 'borderEnabled', 'borderTopLeftRadius': 'borderEnabled',
                'boxShadow': 'boxShadowEnabled', 'boxShadowColor': 'boxShadowEnabled',
                'blur': 'filterEnabled', 'brightness': 'filterEnabled', 'contrast': 'filterEnabled', 'saturate': 'filterEnabled', 'grayscale': 'filterEnabled', 'backdropBlur': 'filterEnabled',
                'duration': 'animationEnabled', 'easing': 'animationEnabled'
            };
            for (const prop in stateObject) {
                if (propToGroupMap[prop] && stateObject[prop] !== this.getDefaultState()[prop]) {
                    stateObject[propToGroupMap[prop]] = true;
                }
            }
        };

        if (effectJson.parent && typeof effectJson.parent === 'object') {
            processAndFlatten(effectJson.parent, newEffect.parent);
            checkAndEnableGroups(newEffect.parent);
        }
        if (effectJson.children && typeof effectJson.children === 'object') {
            newEffect.parent.children = {};
            for(const childKey in effectJson.children) {
                 newEffect.parent.children[childKey] = this.getDefaultState();
                 processAndFlatten(effectJson.children[childKey], newEffect.parent.children[childKey]);
                 checkAndEnableGroups(newEffect.parent.children[childKey]);
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ø–ª–æ—Å–∫–∏–π" –æ–±—ä–µ–∫—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if (!effectJson.parent && !effectJson.children) {
            processAndFlatten(effectJson, newEffect.parent);
            checkAndEnableGroups(newEffect.parent);
        }
        
        return newEffect;
    } catch (e) {
       console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI:", e);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç AI.');
    }
}




};
window.dbmHoverArchitect = dbmHoverArchitect;
console.log('[SUPER-HOVER] –û–±—ä–µ–∫—Ç dbmHoverArchitect —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ window.');
// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç main.js
window.addEventListener('dbmInitSolution', (event) => {
    console.log('[SUPER-HOVER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ dbmInitSolution:', event.detail);
    if (event.detail && event.detail.name === 'dbmHoverArchitect') {
        console.log('[SUPER-HOVER] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç main.js');
        try {
            window.dbmHoverArchitect.dbmInit();
            console.log('[SUPER-HOVER] ‚úÖ dbmHoverArchitect.init() —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω.');
        } catch (e) {
            console.error('[SUPER-HOVER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ init():', e);
        }
    }
});

console.log('[SUPER-HOVER] ‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
console.log('[SUPER-HOVER] ‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');