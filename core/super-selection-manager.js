
console.log('[SUPER-SELECTION-MANAGER] Загружается...');

window.SuperSelectionManager = {
    isActive: false,
    inspector: null,
    highlightedElement: null,
    pinnedElement: null,  // Зафиксированный элемент для интерактивного выбора
    config: {},
    useBlockPrefix: true,
    CLASS_BLOCKLIST: [
        'r', 't-rec', 't-records', 't-container', 'bottommargin', 't-align_center', 't-align_left', 't-margin_auto', 
        'dbm-highlight-element', 'dbm-currently-editing-element', 'selection-active', 't-col_1', 't-col_2', 't-col_3', 
        't-col_4', 't-col_5', 't-col_6', 't-col_7', 't-col_8', 't-col_9', 't-col_10', 't-col_11', 't-col_12', 
        't-prefix_1', 't-prefix_2', 't-prefix_3', 't-prefix_4', 't-prefix_5', 't-prefix_6', 't-prefix_7', 't-prefix_8', 
        't-prefix_9', 't-prefix_10', 't-prefix_11', 't-animate', 't-animate_started', 't-animate__infinite', 
        't-animate__start', 'animate__animated'
    ],

    // === ГЛОБАЛЬНЫЕ КОНСТАНТЫ ДЛЯ ВСЕХ РЕШЕНИЙ ===
    
    TRANSLATION_MAP: {
        card: 'Карточка',
        item: 'Карточка',
        product: 'Товар',
        post: 'Карточка',
        title: 'Заголовок',
        name: 'Заголовок',
        heading: 'Заголовок',
        subtitle: 'Подзаголовок',
        descr: 'Описание',
        description: 'Описание',
        text: 'Текст',
        content: 'Контент',
        wrapper: 'Обертка',
        container: 'Контейнер',
        cover: 'Обложка',
        button: 'Кнопка',
        btn: 'Кнопка',
        link: 'Ссылка',
        image: 'Изображение',
        img: 'Изображение',
        icon: 'Иконка',
        price: 'Цена',
        author: 'Автор',
        date: 'Дата',
        category: 'Категория',
        tag: 'Тег',
        label: 'Метка',
        badge: 'Значок',
        avatar: 'Аватар',
        logo: 'Логотип',
        header: 'Заголовок',
        footer: 'Подвал',
        section: 'Секция',
        block: 'Блок',
        form: 'Форма',
        input: 'Поле ввода',
        textarea: 'Текстовая область',
        select: 'Выпадающий список',
        checkbox: 'Чекбокс',
        radio: 'Радиокнопка',
        menu: 'Меню',
        nav: 'Навигация',
        breadcrumb: 'Хлебные крошки',
        pagination: 'Пагинация',
        slider: 'Слайдер',
        carousel: 'Карусель',
        gallery: 'Галерея',
        grid: 'Сетка',
        list: 'Список',
        table: 'Таблица',
        quote: 'Цитата',
        blockquote: 'Цитата',
        alert: 'Уведомление',
        modal: 'Модальное окно',
        popup: 'Всплывающее окно',
        tooltip: 'Подсказка',
        dropdown: 'Выпадающее меню'
    },

    TILDA_BLOCK_MAP: { "18": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR01", "category": "Обложка"}, "14": {"title": "Обложка: заголовок и описание", "cod": "CR02", "category": "Обложка"}, "46": {"title": "Обложка: заголовок и подзаголовок", "cod": "CR04", "category": "Обложка"}, "114": {"title": "Логотип на фоне", "cod": "CR06", "category": "Обложка"}, "167": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR07", "category": "Обложка"}, "168": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR08", "category": "Обложка"}, "995": {"title": "Обложка с отступами по краям", "cod": "CR09", "category": "Обложка"}, "192": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR10", "category": "Обложка"}, "207": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR11", "category": "Обложка"}, "213": {"title": "Обложка с одной или двумя кнопками", "cod": "CR12", "category": "Обложка"}, "204": {"title": "Обложка с одной или двумя кнопками", "cod": "CR15", "category": "Обложка"}, "205": {"title": "Обложка с одной или двумя кнопками", "cod": "CR16", "category": "Обложка"}, "206": {"title": "Обложка с одной или двумя кнопками", "cod": "CR17", "category": "Обложка"}, "229": {"title": "Обложка: цифра и заголовок", "cod": "CR18", "category": "Обложка"}, "244": {"title": "Обложка: логотип, заголовок и подзаголовок", "cod": "CR19", "category": "Обложка"}, "338": {"title": "Обложка: логотип, заголовок и подзаголовок + кнопка", "cod": "CR19A", "category": "Обложка"}, "274": {"title": "Обложка с автором и датой", "cod": "CR20", "category": "Обложка"}, "275": {"title": "Обложка с заголовком и кнопкой Play", "cod": "CR21", "category": "Обложка"}, "286": {"title": "Обложка с кнопкой Play, заголовком и подзаголовком", "cod": "CR22", "category": "Обложка"}, "986": {"title": "Обложка с кнопкой и кнопкой Play", "cod": "CR22A", "category": "Обложка"}, "448": {"title": "Обложка для приложения или сервиса: скриншот, заголовок, описание, кнопка", "cod": "CR23", "category": "Обложка"}, "1047": {"title": "Обложка с полем ввода", "cod": "CR26N", "category": "Обложка"}, "716": {"title": "Обложка с несколькими полями для ввода", "cod": "CR26AN", "category": "Обложка"}, "289": {"title": "Обложка с выделенным текстом", "cod": "CR27", "category": "Обложка"}, "282": {"title": "Обложка с текстом на плашке", "cod": "CR28", "category": "Обложка"}, "734": {"title": "Промо слайдер", "cod": "CR30N", "category": "Обложка"}, "337": {"title": "Обложка с фото автора", "cod": "CR31", "category": "Обложка"}, "712": {"title": "Обложка с формой справа", "cod": "CR32N", "category": "Обложка"}, "391": {"title": "Обложка с кнопками   Apple Store и Google Play", "cod": "CR33", "category": "Обложка"}, "1016": {"title": "Обложка с таймером и формой подписки", "cod": "CR34N", "category": "Обложка"}, "415": {"title": "Обложка с таймером и кнопками", "cod": "CR35", "category": "Обложка"}, "813": {"title": "Обложка с изображением/Youtube видео и формой в двух колонках", "cod": "CR36", "category": "Обложка"}, "1060": {"title": "Обложка с расписанием", "cod": "CR37N", "category": "Обложка"}, "1065": {"title": "Обложка с расписанием", "cod": "CR38N", "category": "Обложка"}, "891": {"title": "Узкая обложка с заголовком и описанием", "cod": "CR40", "category": "Обложка"}, "906": {"title": "Обложка с заголовком и кнопкой Play", "cod": "CR41", "category": "Обложка"}, "1126": {"title": "Обложка: заголовок, подзаголовок и раздел", "cod": "CR42N", "category": "Обложка"}, "941": {"title": "Обложка со скошенной картинкой", "cod": "CR43", "category": "Обложка"}, "950": {"title": "Текстовая обложка", "cod": "CR44", "category": "Обложка"}, "996": {"title": "Обложка: текст и кнопка на изображении", "cod": "CR45", "category": "Обложка"}, "997": {"title": "Обложка: заголовок, подзаголовок, кнопки и колонки", "cod": "CR46", "category": "Обложка"}, "1001": {"title": "Обложка с изображением внизу", "cod": "CR47", "category": "Обложка"}, "1127": {"title": "Обложка в две колонки с изображением внизу", "cod": "CR48", "category": "Обложка"}, "1120": {"title": "Обложка в две колонки", "cod": "CR49", "category": "Обложка"}, "1241": {"title": "Обложка: текст и изображение в две колонки", "cod": "CR50", "category": "Обложка"}, "106": {"title": "Текст", "cod": "TX01", "category": "Текст"}, "127": {"title": "Лид (вводный текст)", "cod": "TX02", "category": "Текст"}, "37": {"title": "Узкий текстовый блок", "cod": "TX05", "category": "Текст"}, "56": {"title": "Мелкий текст", "cod": "TX08", "category": "Текст"}, "61": {"title": "Текст по центру", "cod": "TX09", "category": "Текст"}, "239": {"title": "Текст и ключевая фраза", "cod": "TX10", "category": "Текст"}, "267": {"title": "Заголовок и раскрывающийся текст", "cod": "TX12", "category": "Текст"}, "248": {"title": "Текст на серой карточке", "cod": "TX13", "category": "Текст"}, "179": {"title": "Текстовый блок на фоне изображения или видео", "cod": "TX14", "category": "Текст"}, "232": {"title": "Текст на белой подложке", "cod": "TX15", "category": "Текст"}, "585": {"title": "Текст в раскрывающихся карточках", "cod": "TX16N", "category": "Текст"}, "668": {"title": "Текст в раскрывающихся карточках на цветном фоне", "cod": "TX16N2", "category": "Текст"}, "664": {"title": "Вопросы и ответы в рамках", "cod": "TX17N", "category": "Текст"}, "665": {"title": "Вопросы и ответы в виде чата", "cod": "TX18N", "category": "Текст"}, "285": {"title": "Поле с кодом", "cod": "TX19", "category": "Текст"}, "296": {"title": "Заметка на подложке", "cod": "TX20", "category": "Текст"}, "356": {"title": "Интервью: вопрос / ответ", "cod": "TX21", "category": "Текст"}, "373": {"title": "Текст с цифрой в кружке", "cod": "TX22", "category": "Текст"}, "1152": {"title": "Заголовок и текст", "cod": "TX23", "category": "Текст"}, "1211": {"title": "Статья", "cod": "TX24", "category": "Текст"}, "172": {"title": "Текст среднего размера", "cod": "IP101", "category": "Текст"}, "672": {"title": "Текст на карточке", "cod": "IP102", "category": "Текст"}, "673": {"title": "Текст в карточке с обводкой", "cod": "IP103", "category": "Текст"}, "36": {"title": "Крупный текст с тонкими разделителями", "cod": "IP201", "category": "Текст"}, "676": {"title": "Текст с разделителями-волнами", "cod": "IP202", "category": "Текст"}, "23": {"title": "Текст среднего размера", "cod": "IP203", "category": "Текст"}, "50": {"title": "Текст среднего размера", "cod": "IP301", "category": "Текст"}, "66": {"title": "Крупный текст", "cod": "IP302", "category": "Текст"}, "67": {"title": "Текст на цветном фоне", "cod": "IP303", "category": "Текст"}, "101": {"title": "Средний текст жирного начертания с разделителями", "cod": "IP401", "category": "Текст"}, "184": {"title": "Крупный текст жирного начертания", "cod": "IP402", "category": "Текст"}, "271": {"title": "Текст с шарингом в Twitter", "cod": "IP403", "category": "Текст"}, "276": {"title": "Текст с двойной рамкой", "cod": "IP404", "category": "Текст"}, "372": {"title": "Текст с линией", "cod": "IP405", "category": "Текст"}, "139": {"title": "Прямая речь", "cod": "QT01", "category": "Текст"}, "92": {"title": "Персона", "cod": "QT02", "category": "Текст"}, "165": {"title": "Персона", "cod": "QT03", "category": "Текст"}, "102": {"title": "Цитата", "cod": "QT04", "category": "Текст"}, "171": {"title": "Цитата", "cod": "QT07", "category": "Текст"}, "173": {"title": "Цитата", "cod": "QT08", "category": "Текст"}, "272": {"title": "Цитата с декоративной кавычкой", "cod": "QT11", "category": "Текст"}, "273": {"title": "Цитата с кавычкой и автором", "cod": "QT12", "category": "Текст"}, "278": {"title": "Цитата с висящей кавычкой", "cod": "QT15", "category": "Текст"}, "295": {"title": "Цитата с кавычкой", "cod": "QT16", "category": "Текст"}, "1030": {"title": "Цитаты с картинкой снизу и текстом на фоне", "cod": "QT19N", "category": "Текст"}, "4": {"title": "Видео", "cod": "VD01", "category": "Видео"}, "200": {"title": "Кнопка «Play»", "cod": "VD04", "category": "Видео"}, "1061": {"title": "Видео в несколько колонок", "cod": "VD06N", "category": "Видео"}, "259": {"title": "Текст и видео в две колонки", "cod": "VD08", "category": "Видео"}, "331": {"title": "Popup: Видео", "cod": "VD09", "category": "Видео"}, "347": {"title": "Видео c обложкой", "cod": "VD11", "category": "Видео"}, "368": {"title": "Видео слева и изображение справа", "cod": "VD12", "category": "Видео"}, "881": {"title": "YouTube-трансляция с комментариями", "cod": "VD13", "category": "Видео"}, "937": {"title": "Плейлист для видеокурса", "cod": "VD14", "category": "Видео"}, "1049": {"title": "VD16 + Youtube", "cod": "T1049", "category": "Видео"}, "126": {"title": "Линия", "cod": "DV01", "category": "Разделитель"}, "219": {"title": "Короткая линия", "cod": "DV01A", "category": "Разделитель"}, "363": {"title": "Линия с полупрозрачными краями", "cod": "DV02N", "category": "Разделитель"}, "70": {"title": "Тонкая вертикальная линия", "cod": "DV03", "category": "Разделитель"}, "71": {"title": "Тильда", "cod": "DV04", "category": "Разделитель"}, "113": {"title": "Дополнительный отступ", "cod": "DV05", "category": "Разделитель"}, "158": {"title": "Цифра в круге", "cod": "DV06", "category": "Разделитель"}, "162": {"title": "Линия и цифра в круге", "cod": "DV07", "category": "Разделитель"}, "1022": {"title": "Линия с иконкой", "cod": "DV08", "category": "Разделитель"}, "163": {"title": "Линия с открывающей кавычкой", "cod": "DV08A", "category": "Разделитель"}, "164": {"title": "Линия с закрывающей кавычкой", "cod": "DV08B", "category": "Разделитель"}, "260": {"title": "Заголовок в квадрате", "cod": "DV09", "category": "Разделитель"}, "930": {"title": "Три иконки", "cod": "DV10N", "category": "Разделитель"}, "376": {"title": "Переключатель цвета фона", "cod": "DV11", "category": "Разделитель"}, "241": {"title": "Переключатель цвета фона. Плавная смена цвета ", "cod": "DV11A", "category": "Разделитель"}, "796": {"title": "Фигурная граница ", "cod": "DV12", "category": "Разделитель"}, "1003": {"title": "Бегущая строка", "cod": "DV13", "category": "Разделитель"}, "403": {"title": "Сетка блога", "cod": "IX01", "category": "Список страниц"}, "404": {"title": "Сетка для блога или портфолио", "cod": "IX02", "category": "Список страниц"}, "405": {"title": "Сетка для советуемых также материалов", "cod": "IX03", "category": "Список страниц"}, "142": {"title": "Полноэкранная сетка", "cod": "IX04", "category": "Список страниц"}, "406": {"title": "Слайдер с баннерами", "cod": "IX05", "category": "Список страниц"}, "134": {"title": "Оглавление", "cod": "IX06", "category": "Список страниц"}, "1062": {"title": "Оглавление", "cod": "IX06A", "category": "Список страниц"}, "401": {"title": "Сетка для блога или портфолио", "cod": "IX07", "category": "Список страниц"}, "60": {"title": "Заголовок: 82", "cod": "TL01", "category": "Заголовок"}, "30": {"title": "Заголовок: 64", "cod": "TL02", "category": "Заголовок"}, "255": {"title": "Заголовок: 52", "cod": "TL02A", "category": "Заголовок"}, "795": {"title": "Заголовок: 42, для секций", "cod": "TL02B", "category": "Заголовок"}, "33": {"title": "Заголовок: 36", "cod": "TL03", "category": "Заголовок"}, "43": {"title": "Заголовок: 36", "cod": "TL03A", "category": "Заголовок"}, "128": {"title": "Заголовок: 28", "cod": "TL04", "category": "Заголовок"}, "40": {"title": "Заголовок: 14", "cod": "TL05", "category": "Заголовок"}, "65": {"title": "Заголовок: 24", "cod": "TL06", "category": "Заголовок"}, "3": {"title": "Изображение", "cod": "IM01", "category": "Изображение"}, "160": {"title": "Полноэкранное изображение", "cod": "IM02", "category": "Изображение"}, "94": {"title": "Изображение с текстом на полях", "cod": "IM04", "category": "Изображение"}, "237": {"title": "Текст на картинке с длинным скроллом ", "cod": "IM05", "category": "Изображение"}, "238": {"title": "Ключевая фраза на картинке с длинным скроллом ", "cod": "IM06", "category": "Изображение"}, "224": {"title": "Изображение и описание на полях", "cod": "IM07", "category": "Изображение"}, "159": {"title": "Изображение в круге", "cod": "IM08", "category": "Изображение"}, "223": {"title": "Текст и изображение", "cod": "IM10", "category": "Изображение"}, "222": {"title": "Текст с изображением и описанием на полях", "cod": "IM11", "category": "Изображение"}, "182": {"title": "Текст, обтекающий изображение", "cod": "IM13", "category": "Изображение"} },

    ICONS: {
        close: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.3081 5.80806C13.5521 5.56398 13.9478 5.56398 14.1918 5.80806C14.4359 6.05214 14.4359 6.44777 14.1918 6.69185L10.8837 9.99995L14.1918 13.3081C14.4359 13.5521 14.4359 13.9478 14.1918 14.1918C13.9478 14.4359 13.5521 14.4359 13.3081 14.1918L9.99995 10.8837L6.69185 14.1918C6.44777 14.4359 6.05214 14.4359 5.80806 14.1918C5.56398 13.9478 5.56398 13.5521 5.80806 13.3081L9.11616 9.99995L5.80806 6.69185C5.56398 6.44777 5.56398 6.05214 5.80806 5.80806C6.05214 5.56398 6.44777 5.56398 6.69185 5.80806L9.99995 9.11616L13.3081 5.80806Z" fill="#96A2AB"/>
</svg>`,
        backArrow: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.89074 5.39155C8.13482 5.14748 8.53045 5.14748 8.77453 5.39155C9.01861 5.63563 9.01861 6.03127 8.77453 6.27534L5.67476 9.37512H15.8326C16.1778 9.37512 16.4576 9.65494 16.4576 10.0001C16.4576 10.3453 16.1778 10.6251 15.8326 10.6251H5.67476L8.77453 13.7249C9.01861 13.969 9.01861 14.3646 8.77453 14.6087C8.53045 14.8528 8.13482 14.8528 7.89074 14.6087L3.72407 10.442C3.48 10.1979 3.48 9.8023 3.72407 9.55822L7.89074 5.39155Z" fill="#96A2AB"/>
</svg>`,
        reselect: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.54227 11.6666V5.67539L2.52583 6.69183C2.28175 6.93591 1.88612 6.93591 1.64204 6.69183C1.39796 6.44775 1.39796 6.05212 1.64204 5.80804L3.72538 3.72471L3.77258 3.68158C4.01806 3.48132 4.38033 3.49587 4.60917 3.72471L6.6925 5.80804C6.93658 6.05212 6.93658 6.44775 6.6925 6.69183C6.44842 6.93591 6.05279 6.93591 5.80871 6.69183L4.79227 5.67539V11.6666C4.79227 13.6223 6.37828 15.2083 8.33394 15.2083H10.8339C11.1791 15.2083 11.4589 15.4881 11.4589 15.8333C11.4589 16.1784 11.1791 16.4583 10.8339 16.4583H8.33394C5.68793 16.4583 3.54227 14.3126 3.54227 11.6666ZM15.2089 8.33327C15.2089 6.37761 13.6229 4.7916 11.6673 4.7916H9.16727C8.82209 4.7916 8.54227 4.51178 8.54227 4.1666C8.54227 3.82142 8.82209 3.5416 9.16727 3.5416H11.6673C14.3133 3.5416 16.4589 5.68726 16.4589 8.33327V14.3245L17.892 12.8914C18.1361 12.6473 18.5318 12.6473 18.7758 12.8914C19.0199 13.1355 19.0199 13.5311 18.7758 13.7752L16.2758 16.2752C16.0318 16.5192 15.6361 16.5192 15.392 16.2752L12.892 13.7752C12.648 13.5311 12.648 13.1355 12.892 12.8914C13.1361 12.6473 13.5318 12.6473 13.7758 12.8914L15.2089 14.3245V8.33327Z" fill="#96A2AB"/>
</svg>`,
        trash: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.6553 3.43457C12.6551 3.26203 12.5153 3.12221 12.3428 3.12207H7.65332C7.57034 3.12207 7.49032 3.15519 7.43164 3.21387C7.37316 3.27244 7.33995 3.3518 7.33984 3.43457V4.68555H12.6553V3.43457ZM5.79785 15.7227C5.84798 16.3743 6.39135 16.8779 7.04492 16.8779H12.9492C13.6028 16.8779 14.1462 16.3743 14.1963 15.7227L14.9492 5.93555H5.04492L5.79785 15.7227ZM11.6641 13.543C12.0091 13.543 12.2888 13.823 12.2891 14.168C12.2891 14.5131 12.0092 14.793 11.6641 14.793H8.33008C7.9849 14.793 7.70508 14.5131 7.70508 14.168C7.7053 13.823 7.98504 13.543 8.33008 13.543H11.6641ZM13.9053 4.68555H16.667C17.0122 4.68555 17.292 4.96537 17.292 5.31055C17.292 5.65572 17.0122 5.93555 16.667 5.93555H16.2041L15.4434 15.8193C15.343 17.1221 14.2559 18.1279 12.9492 18.1279H7.04492C5.7383 18.1279 4.65217 17.122 4.55176 15.8193L3.79102 5.93555H3.32812C2.98295 5.93555 2.70312 5.65572 2.70312 5.31055C2.70313 4.96537 2.98295 4.68555 3.32812 4.68555H6.08984V3.43457C6.08995 3.02028 6.25495 2.62307 6.54785 2.33008C6.84095 2.03698 7.23882 1.87207 7.65332 1.87207H12.3428C13.2057 1.87221 13.9051 2.57168 13.9053 3.43457V4.68555Z" fill="#96A2AB"/>
</svg>`,
        deleteCross: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.6553 3.43457C12.6551 3.26203 12.5153 3.12221 12.3428 3.12207H7.65332C7.57034 3.12207 7.49032 3.15519 7.43164 3.21387C7.37316 3.27244 7.33995 3.3518 7.33984 3.43457V4.68555H12.6553V3.43457ZM5.79785 15.7227C5.84798 16.3743 6.39135 16.8779 7.04492 16.8779H12.9492C13.6028 16.8779 14.1462 16.3743 14.1963 15.7227L14.9492 5.93555H5.04492L5.79785 15.7227ZM11.6641 13.543C12.0091 13.543 12.2888 13.823 12.2891 14.168C12.2891 14.5131 12.0092 14.793 11.6641 14.793H8.33008C7.9849 14.793 7.70508 14.5131 7.70508 14.168C7.7053 13.823 7.98504 13.543 8.33008 13.543H11.6641ZM13.9053 4.68555H16.667C17.0122 4.68555 17.292 4.96537 17.292 5.31055C17.292 5.65572 17.0122 5.93555 16.667 5.93555H16.2041L15.4434 15.8193C15.343 17.1221 14.2559 18.1279 12.9492 18.1279H7.04492C5.7383 18.1279 4.65217 17.122 4.55176 15.8193L3.79102 5.93555H3.32812C2.98295 5.93555 2.70312 5.65572 2.70312 5.31055C2.70313 4.96537 2.98295 4.68555 3.32812 4.68555H6.08984V3.43457C6.08995 3.02028 6.25495 2.62307 6.54785 2.33008C6.84095 2.03698 7.23882 1.87207 7.65332 1.87207H12.3428C13.2057 1.87221 13.9051 2.57168 13.9053 3.43457V4.68555Z" fill="#96A2AB"/>
</svg>`,
        add: `<svg width="100%" height="100%" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.50098 11.334V8.5H4.66797C4.39183 8.5 4.16797 8.27614 4.16797 8C4.16814 7.72401 4.39193 7.5 4.66797 7.5H7.50098V4.66699C7.50098 4.39096 7.72498 4.16717 8.00098 4.16699C8.27712 4.16699 8.50098 4.39085 8.50098 4.66699V7.5H11.335C11.6108 7.50018 11.8348 7.72412 11.835 8C11.835 8.27603 11.611 8.49982 11.335 8.5H8.50098V11.334C8.5008 11.61 8.27701 11.834 8.00098 11.834C7.72509 11.8338 7.50115 11.6099 7.50098 11.334Z" fill="#96A2AB"/>
</svg>`,
        magic: `<svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.175 9.16667L4.38758 8.39183C4.20467 8.3165 4.20467 8.06766 4.38758 7.99233L6.175 7.21667C6.63308 7.02 6.98417 6.64608 7.175 6.175L7.99183 4.38758C8.06716 4.20467 8.31601 4.20467 8.39134 4.38758L9.20817 6.175C9.39901 6.64608 9.75009 7.02 10.2082 7.21667L11.9956 7.99233C12.1785 8.06766 12.1785 8.3165 11.9956 8.39183L10.2082 9.16667C9.75009 9.36333 9.39901 9.73725 9.20817 10.2084L8.39134 11.9958C8.31601 12.1787 8.06716 12.1787 7.99183 11.9958L7.175 10.2084C6.98417 9.73725 6.63308 9.36333 6.175 9.16667Z" fill="#96A2AB"/>
<path d="M13.2082 15.8334L12.7707 15.6625C12.6956 15.6332 12.6956 15.5334 12.7707 15.5041L13.2082 15.3334C13.4374 15.2375 13.5998 15.0583 13.6915 14.8209L13.8625 14.3834C13.8918 14.3083 13.9916 14.3083 14.0209 14.3834L14.1915 14.8209C14.2832 15.0583 14.4457 15.2375 14.6748 15.3334L15.1123 15.5041C15.1874 15.5334 15.1874 15.6332 15.1123 15.6625L14.6748 15.8334C14.4457 15.9291 14.2832 16.1084 14.1915 16.3459L14.0209 16.7834C13.9916 16.8584 13.8918 16.8584 13.8625 16.7834L13.6915 16.3459C13.5998 16.1084 13.4374 15.9291 13.2082 15.8334Z" fill="#96A2AB"/>
<path d="M4.47493 16.6667L3.80826 16.4166C3.66243 16.3666 3.66243 16.1666 3.80826 16.1166L4.47493 15.8667C4.79159 15.75 5.04159 15.4833 5.15826 15.1667L5.40826 14.5C5.45826 14.3542 5.65826 14.3542 5.70826 14.5L5.95826 15.1667C6.07493 15.4833 6.32493 15.75 6.64159 15.8667L7.30826 16.1166C7.45409 16.1666 7.45409 16.3666 7.30826 16.4166L6.64159 16.6667C6.32493 16.7833 6.07493 17.05 5.95826 17.3667L5.70826 18.0334C5.65826 18.1791 5.45826 18.1791 5.40826 18.0334L5.15826 17.3667C5.04159 17.05 4.79159 16.7833 4.47493 16.6667Z" fill="#96A2AB"/>
<path d="M8.37486 2.20833L7.85819 2.025C7.76236 1.99167 7.76236 1.875 7.85819 1.84167L8.37486 1.65833C8.59569 1.575 8.76236 1.39583 8.84569 1.175L9.02903 0.658333C9.06236 0.5625 9.17903 0.5625 9.21236 0.658333L9.39569 1.175C9.47903 1.39583 9.64569 1.575 9.86653 1.65833L10.3832 1.84167C10.479 1.875 10.479 1.99167 10.3832 2.025L9.86653 2.20833C9.64569 2.29167 9.47903 2.47083 9.39569 2.69167L9.21236 3.20833C9.17903 3.30417 9.06236 3.30417 9.02903 3.20833L8.84569 2.69167C8.76236 2.47083 8.59569 2.29167 8.37486 2.20833Z" fill="#96A2AB"/>
<path d="M17.9165 11.2917L17.4832 11.1375C17.4081 11.1125 17.4081 11.0291 17.4832 11.0041L17.9165 10.85C18.1415 10.7708 18.3165 10.5791 18.3998 10.3542L18.5498 9.92083C18.5748 9.84583 18.6581 9.84583 18.6831 9.92083L18.8331 10.3542C18.9165 10.5791 19.0915 10.7708 19.3165 10.85L19.7498 11.0041C19.8248 11.0291 19.8248 11.1125 19.7498 11.1375L19.3165 11.2917C19.0915 11.3708 18.9165 11.5625 18.8331 11.7875L18.6831 12.2208C18.6581 12.2958 18.5748 12.2958 18.5498 12.2208L18.3998 11.7875C18.3165 11.5625 18.1415 11.3708 17.9165 11.2917Z" fill="#96A2AB"/>
</svg>`,
        ai: `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.25 21V19.75H4C3.58579 19.75 3.25 19.4142 3.25 19C3.25 18.5858 3.58579 18.25 4 18.25H5.25V17C5.25 16.5858 5.58579 16.25 6 16.25C6.41421 16.25 6.75 16.5858 6.75 17V18.25H8C8.41421 18.25 8.75 18.5858 8.75 19C8.75 19.4142 8.41421 19.75 8 19.75H6.75V21C6.75 21.4142 6.41421 21.75 6 21.75C5.58579 21.75 5.25 21.4142 5.25 21ZM21.25 12C21.25 11.8962 21.1858 11.8035 21.0889 11.7666L18.9561 10.9561C17.153 10.2709 15.7291 8.847 15.0439 7.04395L14.2334 4.91113C14.1965 4.81419 14.1038 4.75 14 4.75C13.8962 4.75 13.8035 4.81418 13.7666 4.91113L12.9561 7.04395C12.2709 8.847 10.847 10.2709 9.04395 10.9561L6.91113 11.7666C6.81418 11.8035 6.75 11.8962 6.75 12C6.75 12.1038 6.81418 12.1965 6.91113 12.2334L9.04395 13.0439C10.847 13.7291 12.2709 15.153 12.9561 16.9561L13.7666 19.0889C13.8035 19.1858 13.8962 19.25 14 19.25C14.1038 19.25 14.1965 19.1858 14.2334 19.0889L15.0439 16.9561C15.7291 15.153 17.153 13.7291 18.9561 13.0439L21.0889 12.2334C21.1858 12.1965 21.25 12.1038 21.25 12ZM4.25 7V5.75H3C2.58579 5.75 2.25 5.41421 2.25 5C2.25 4.58579 2.58579 4.25 3 4.25H4.25V3C4.25 2.58579 4.58579 2.25 5 2.25C5.41421 2.25 5.75 2.58579 5.75 3V4.25H7C7.41421 4.25 7.75 4.58579 7.75 5C7.75 5.41421 7.41421 5.75 7 5.75H5.75V7C5.75 7.41421 5.41421 7.75 5 7.75C4.58579 7.75 4.25 7.41421 4.25 7ZM22.75 12C22.75 12.7265 22.3011 13.3775 21.6221 13.6357L19.4893 14.4463C18.0868 14.9792 16.9792 16.0868 16.4463 17.4893L15.6357 19.6221C15.3775 20.3011 14.7265 20.75 14 20.75C13.2735 20.75 12.6225 20.3011 12.3643 19.6221L11.5537 17.4893C11.0208 16.0868 9.91319 14.9792 8.51074 14.4463L6.37793 13.6357C5.69889 13.3775 5.25 12.7265 5.25 12C5.25 11.2735 5.69889 10.6225 6.37793 10.3643L8.51074 9.55371C9.91319 9.0208 11.0208 7.9132 11.5537 6.51074L12.3643 4.37793C12.6225 3.69889 13.2735 3.25 14 3.25C14.7265 3.25 15.3775 3.69889 15.6357 4.37793L16.4463 6.51074C16.9792 7.9132 18.0868 9.0208 19.4893 9.55371L21.6221 10.3643C22.3011 10.6225 22.75 11.2735 22.75 12Z" fill="white"/>
</svg>
`,
        palette: `<svg width="100%" height="100%" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.14527 2.86827C8.14526 2.82211 8.13208 2.79625 8.1189 2.77941C8.10315 2.75931 8.07747 2.74015 8.04371 2.7296C8.01012 2.71912 7.97831 2.72017 7.95386 2.72765C7.93332 2.73401 7.90684 2.7475 7.88062 2.78527L3.87378 8.57433C3.80705 8.67061 3.87562 8.80187 3.99292 8.80187H7.34253C7.62559 8.80187 7.855 9.03156 7.85523 9.31456V13.13C7.85523 13.1762 7.86839 13.203 7.8816 13.2198C7.89727 13.2398 7.92331 13.2581 7.95679 13.2687C7.99056 13.2792 8.02311 13.2782 8.04761 13.2706C8.06813 13.2642 8.09372 13.2507 8.11988 13.213L12.1267 7.42491L12.1462 7.38683C12.1759 7.29698 12.1098 7.19666 12.0085 7.1964H8.65796C8.37488 7.1963 8.1453 6.96681 8.14527 6.6837V2.86827ZM9.17066 6.17101H12.0085C12.8933 6.17129 13.4365 7.10325 13.0584 7.85948L12.9705 8.00792L8.96265 13.797C8.30943 14.7393 6.82984 14.2786 6.82984 13.13V9.82726H3.99292C3.0489 9.82726 2.49241 8.7674 3.03101 7.99034L7.03785 2.20226V2.20128C7.69107 1.25896 9.17062 1.71971 9.17066 2.86827V6.17101Z" fill="#96A2AB"/>
</svg>`,
        savePreset: `<svg width="100%" height="100%" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.5008 8C13.5008 4.96214 11.0387 2.5 8.0008 2.5C7.72481 2.49982 7.5008 2.27603 7.5008 2C7.5008 1.72397 7.72481 1.50018 8.0008 1.5C11.5909 1.5 14.5008 4.40986 14.5008 8C14.5008 11.5901 11.5909 14.5 8.0008 14.5C7.72481 14.4998 7.5008 14.276 7.5008 14C7.5008 13.724 7.72481 13.5002 8.0008 13.5C11.0387 13.5 13.5008 11.0379 13.5008 8ZM3.76252 12.2734C3.93998 12.062 4.25509 12.0346 4.46662 12.2119C4.95148 12.6188 5.51133 12.9405 6.12189 13.1631C6.38128 13.2576 6.51515 13.5443 6.42072 13.8037C6.3262 14.0631 6.03947 14.1969 5.7801 14.1025C5.06275 13.8411 4.40046 13.4613 3.82404 12.9775C3.61275 12.8 3.58519 12.4849 3.76252 12.2734ZM2.01057 8.54785C2.2825 8.50007 2.54183 8.68219 2.58967 8.9541C2.70274 9.59769 2.92686 10.2017 3.24201 10.7471C3.38012 10.9861 3.29837 11.2925 3.05939 11.4307C2.8203 11.5688 2.51396 11.4862 2.3758 11.2471C2.00306 10.6019 1.73886 9.88722 1.60529 9.12695C1.55765 8.85516 1.73883 8.59577 2.01057 8.54785ZM7.5008 9.55371V8.5H6.44806C6.17192 8.5 5.94806 8.27614 5.94806 8C5.94806 7.72386 6.17192 7.5 6.44806 7.5H7.5008V6.44629C7.50097 6.1704 7.72491 5.94646 8.0008 5.94629C8.27683 5.94629 8.50062 6.1703 8.5008 6.44629V7.5H9.55451C9.8306 7.50006 10.0545 7.72389 10.0545 8C10.0545 8.27611 9.8306 8.49994 9.55451 8.5H8.5008V9.55371C8.50057 9.82966 8.2768 10.0537 8.0008 10.0537C7.72495 10.0535 7.50103 9.82955 7.5008 9.55371ZM2.3758 4.75195C2.51396 4.51286 2.8203 4.43118 3.05939 4.56934C3.29806 4.70757 3.37989 5.01304 3.24201 5.25195C2.92689 5.79731 2.70275 6.40139 2.58967 7.04492C2.54188 7.3169 2.28254 7.49896 2.01057 7.45117C1.73879 7.40322 1.55753 7.14392 1.60529 6.87207C1.73888 6.11175 2.00301 5.39716 2.3758 4.75195ZM5.7801 1.89746C6.03958 1.80315 6.32634 1.93686 6.42072 2.19629C6.51503 2.45577 6.38132 2.74253 6.12189 2.83691C5.5116 3.05873 4.95235 3.38069 4.4676 3.78809C4.2562 3.96575 3.94019 3.93796 3.76252 3.72656C3.58519 3.51517 3.61277 3.20003 3.82404 3.02246C4.40055 2.53794 5.06249 2.1583 5.7801 1.89746Z" fill="#96A2AB"/>
</svg>`,
        copyCode: `<svg width="100%" height="100%" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4 2C4 1.44772 4.44772 1 5 1H11C11.5523 1 12 1.44772 12 2V4H13C13.5523 4 14 4.44772 14 5V11C14 11.5523 13.5523 12 13 12H7C6.44772 12 6 11.5523 6 11V9H5C4.44772 9 4 8.55228 4 8V2ZM6 2V8H11V2H6ZM8 5V6H9V5H8ZM8 7V8H9V7H8ZM7 5V6H8V5H7ZM7 7V8H8V7H7Z" fill="#96A2AB"/>
</svg>`,
        play: `<svg width="100%" height="100%" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 2.5C3 1.67157 3.67157 1 4.5 1H11.5C12.3284 1 13 1.67157 13 2.5V13.5C13 14.3284 12.3284 15 11.5 15H4.5C3.67157 15 3 14.3284 3 13.5V2.5ZM4.5 2C4.22386 2 4 2.22386 4 2.5V13.5C4 13.7761 4.22386 14 4.5 14H11.5C11.7761 14 12 13.7761 12 13.5V2.5C12 2.22386 11.7761 2 11.5 2H4.5ZM6.5 4.5L10.5 8L6.5 11.5V4.5Z" fill="#96A2AB"/>
</svg>`
    },

    // --- Core Methods ---

    startSelection(config) {
        if (this.isActive) {
            console.warn('[SelectionManager] Выбор уже активен.');
            return;
        }

        this.config = {
            onSelect: () => {},
            onCancel: () => {},
            blacklist: ['.dbm-editor-panel', '#dbm-inspector-tooltip'],
            ...config
        };

        this.isActive = true;
        document.body.classList.add('selection-active');
        this.createInspector();
        this.addEventListeners();

        console.log('[SelectionManager] Режим выбора активирован.');
    },

    endSelection() {
        if (!this.isActive) return;

        this.isActive = false;
        this.pinnedElement = null;
        document.body.classList.remove('selection-active');
        this.removeEventListeners();
        this.removeInspector();
        this.removeHighlight();
        console.log('[SelectionManager] Режим выбора деактивирован.');
    },

    // --- Event Handlers ---

    addEventListeners() {
        this.handleMouseMove = this.handleMouseMove.bind(this);
        this.handleBodyClick = this.handleBodyClick.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);

        document.addEventListener('mousemove', this.handleMouseMove, true);
        document.addEventListener('click', this.handleBodyClick, true);
        document.addEventListener('keydown', this.handleKeyDown, true);
    },

    removeEventListeners() {
        document.removeEventListener('mousemove', this.handleMouseMove, true);
        document.removeEventListener('click', this.handleBodyClick, true);
        document.removeEventListener('keydown', this.handleKeyDown, true);
    },

    handleMouseMove(e) {
        if (!this.isActive || this.pinnedElement) return;

        const target = e.target;

        // Игнорируем элементы из черного списка (панель, инспектор)
        if (this.isBlacklisted(target)) {
            this.removeHighlight();
            this.hideInspector();
            return;
        }

        if (target === this.highlightedElement) return;

        this.highlightedElement = target;
        this.applyHighlight(target);
        this.updateInspector(target, e.clientX, e.clientY);
    },

    handleBodyClick(e) {
        if (!this.isActive || this.isBlacklisted(e.target)) return;
        
        e.preventDefault();
        e.stopPropagation();

        const inspectorClicked = e.target.closest('#dbm-inspector-tooltip');
        const selectorTag = e.target.closest('.dbm-selector-tag');

        // Если мы уже "заморозили" элемент и теперь кликаем по классу в инспекторе
        if (this.pinnedElement) {
            if (inspectorClicked && selectorTag) {
                // Клик по селектору в зафиксированном инспекторе
                let bestSelector = selectorTag.dataset.selector;
                const selectedElement = document.querySelector(bestSelector);
                
                // Применяем настройку useBlockPrefix для финального селектора
                bestSelector = this.applyBlockPrefixSetting(bestSelector);
                
                console.log('[SelectionManager] Выбран селектор из зафиксированного инспектора:', bestSelector);
                
                if (this.config.onSelect && bestSelector) {
                    this.config.onSelect(selectedElement, bestSelector);
                }
                this.endSelection();
            } else if (!inspectorClicked) {
                // Клик мимо инспектора - отменяем выбор
                console.log('[SelectionManager] Клик мимо зафиксированного инспектора - отмена выбора');
                if (this.config.onCancel) {
                    this.config.onCancel();
                }
                this.endSelection();
            } else {
                // Клик внутри инспектора, но не по селектору - ничего не делаем
                console.log('[SelectionManager] Клик внутри зафиксированного инспектора (не по селектору)');
            }
            return;
        }

        // Первый клик по элементу - фиксируем его и показываем интерактивный инспектор
        const target = this.highlightedElement;
        if (target && !inspectorClicked) {
            console.log('[SelectionManager] Фиксируем элемент для интерактивного выбора:', target);
            this.pinnedElement = target;
            
            // Делаем инспектор интерактивным до обновления
            if (this.inspector) {
                this.inspector.classList.add('is-interactive');
            }
            
            // Обновляем инспектор (теперь он знает, что зафиксирован)
            this.updateInspector(target, e.clientX, e.clientY);
        }
    },

    handleKeyDown(e) {
        if (this.isActive && e.key === 'Escape') {
            console.log('[SelectionManager] Выбор отменен (ESC).');
            if (this.config.onCancel) {
                this.config.onCancel();
            }
            this.endSelection();
        }
    },

    // --- UI Methods ---

    createInspector() {
        if (this.inspector) return;
        this.inspector = document.createElement('div');
        this.inspector.id = 'dbm-inspector-tooltip';
        document.body.appendChild(this.inspector);
    },

    removeInspector() {
        if (this.inspector) {
            // Убираем все подсветки перед удалением инспектора
            document.querySelectorAll('.dbm-highlight-element-preview').forEach(el => {
                el.classList.remove('dbm-highlight-element-preview');
            });
            
            this.inspector.remove();
            this.inspector = null;
        }
    },

    hideInspector() {
        if (this.inspector) {
            this.inspector.style.display = 'none';
        }
    },

    updateInspector(element, x, y) {
        if (!element) {
            this.hideInspector();
            return;
        }

        // Используем buildSelectorHierarchyHTML для полной иерархии как в оригинале
        const hierarchyHTML = this.buildSelectorHierarchyHTML(element, false);
        if (!hierarchyHTML) {
            this.hideInspector();
            return;
        }

        this.inspector.innerHTML = `
           <div class="dbm-inspector-section">
                <h4>Выберите элемент для создания эффекта</h4>
                <div>${hierarchyHTML}</div>
            </div>`;
        this.inspector.style.display = 'block';
        
        // Position tooltip
        const inspectorRect = this.inspector.getBoundingClientRect();
        let top = y + 20;
        let left = x + 20;
        if (top + inspectorRect.height > window.innerHeight) {
            top = y - inspectorRect.height - 10;
        }
        if (left + inspectorRect.width > window.innerWidth) {
            left = x - inspectorRect.width - 10;
        }
        
        // Если панель зафиксирована, добавляем обработчики событий
        if (this.pinnedElement && this.inspector.classList.contains('is-interactive')) {
            console.log('[SelectionManager] Панель зафиксирована, добавляем обработчики...');
            this.addHighlightEventListeners();
        }
        this.inspector.style.top = `${top}px`;
        this.inspector.style.left = `${left}px`;
    },

    applyHighlight(element) {
        this.removeHighlight();
        element.classList.add('dbm-highlight-element');
    },

    removeHighlight() {
        const highlighted = document.querySelector('.dbm-highlight-element');
        if (highlighted) {
            highlighted.classList.remove('dbm-highlight-element');
        }
    },

    // --- Logic & Helpers ---

    isBlacklisted(element) {
        return this.config.blacklist.some(selector => element.closest(selector));
    },

    // === ГЛОБАЛЬНЫЕ HELPER МЕТОДЫ ДЛЯ ВСЕХ РЕШЕНИЙ ===

    getTranslationForSelector(selector) {
        if (!selector) return '';
        
        // Пытаемся найти элемент по селектору для более точного анализа
        let element = null;
        try {
            element = document.querySelector(selector);
        } catch (e) {
            // Если селектор некорректный, игнорируем
        }
        
        // Если элемент найден, анализируем его более детально
        if (element) {
            // Проверяем теги
            const tagName = element.tagName.toLowerCase();
            if (tagName === 'img') return 'Изображение';
            if (tagName === 'h1' || tagName === 'h2' || tagName === 'h3' || tagName === 'h4' || tagName === 'h5' || tagName === 'h6') return 'Заголовок';
            if (tagName === 'p') return 'Текст';
            if (tagName === 'a') return 'Ссылка';
            if (tagName === 'button') return 'Кнопка';
            if (tagName === 'video') return 'Видео';
            if (tagName === 'iframe' && element.src && element.src.includes('youtube')) return 'Видео';
            
            // Проверяем содержимое текста для заголовков
            const text = element.textContent?.trim() || '';
            if (text.length > 0 && text.length < 100) {
                const hasTitle = /title|заголов|heading|name/i.test(element.className);
                const hasDescr = /descr|description|text|content/i.test(element.className);
                if (hasTitle) return 'Заголовок';
                if (hasDescr) return 'Описание';
            }
            
            // Анализируем классы элемента
            const classNames = element.className;
            if (typeof classNames === 'string' && classNames) {
                for (const [key, value] of Object.entries(this.TRANSLATION_MAP)) {
                    if (classNames.includes(key)) {
                        return value;
                    }
                }
            }
            
            // Специальная логика для Tilda блоков
            if (element.closest('.t-card') || classNames.includes('card') || classNames.includes('item')) {
                return 'Карточка';
            }
            
            // Проверяем родительские элементы для контекста
            const parentCard = element.closest('[class*="card"], [class*="item"], [class*="product"]');
            if (parentCard) {
                if (element.querySelector('img') || tagName === 'img') return 'Изображение';
                if (text.length > 100) return 'Описание';
                if (text.length > 0 && text.length <= 100) return 'Заголовок';
            }
        }
        
        // Fallback: ищем переводы для различных частей селектора
        const parts = selector.split(/[\s.#>~+:]+/);
        for (const part of parts) {
            if (part && this.TRANSLATION_MAP[part]) {
                return this.TRANSLATION_MAP[part];
            }
        }
        
        return 'Элемент'; // Дефолтное значение
    },

    getBlockInfo(selector) {
        if (!selector || typeof selector !== 'string') return null;
        
        // Извлекаем ID блока из селектора (например, #rec123456)
        const blockIdMatch = selector.match(/#rec(\d+)/);
        if (blockIdMatch) {
            const blockId = blockIdMatch[1];
            const blockInfo = this.TILDA_BLOCK_MAP[blockId];
            if (blockInfo) {
                return {
                    id: blockId,
                    title: blockInfo.title,
                    cod: blockInfo.cod,
                    category: blockInfo.category
                };
            }
        }
        return null;
    },

    cleanSelectorForDisplay(selector) {
        if (!selector || typeof selector !== 'string') return '';
        // Убираем префикс блока (#rec... или .uc-...) для отображения
        return selector.replace(/^(#rec[0-9]+|\.uc-[\w-]+)\s*/, '');
    },

    // Применяет настройку useBlockPrefix к селектору
    applyBlockPrefixSetting(selector) {
        if (!selector || typeof selector !== 'string') return selector;
        
        // Если useBlockPrefix отключен, убираем префикс
        if (!this.useBlockPrefix) {
            return this.cleanSelectorForDisplay(selector);
        }
        
        // Если включен, возвращаем полный селектор
        return selector;
    },

    // Добавляем обработчики для подсветки элементов при наведении на селекторы
    addHighlightEventListeners() {
        if (!this.inspector) return;
        
        this.inspector.querySelectorAll('[data-selector]').forEach(item => {
            const selector = item.dataset.selector;
            if (!selector) return;

            // Обработчик клика - главный для выбора
            item.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('[SelectionManager] Клик по селектору в зафиксированном инспекторе:', selector);
                
                let bestSelector = selector;
                const selectedElement = document.querySelector(bestSelector);
                
                // Применяем настройку useBlockPrefix для финального селектора
                bestSelector = this.applyBlockPrefixSetting(bestSelector);
                
                console.log('[SelectionManager] Финальный селектор после обработки:', bestSelector);
                
                if (this.config.onSelect && bestSelector) {
                    this.config.onSelect(selectedElement, bestSelector);
                }
                this.endSelection();
            });

            item.addEventListener('mouseenter', () => {
                try {
                    // Убираем предыдущую подсветку
                    document.querySelectorAll('.dbm-highlight-element-preview').forEach(el => {
                        el.classList.remove('dbm-highlight-element-preview');
                    });
                    
                    // Добавляем подсветку для элементов, соответствующих селектору
                    document.querySelectorAll(selector).forEach(el => {
                        el.classList.add('dbm-highlight-element-preview');
                    });
                } catch (e) {
                    console.warn('Некорректный селектор для подсветки:', selector);
                }
            });

            item.addEventListener('mouseleave', () => {
                try {
                    // Убираем подсветку при уходе курсора
                    document.querySelectorAll('.dbm-highlight-element-preview').forEach(el => {
                        el.classList.remove('dbm-highlight-element-preview');
                    });
                } catch (e) {
                    console.warn('Ошибка при удалении подсветки:', selector);
                }
            });
        });
    },

    getUniqueSelector(el) {
        if (!el || el.closest('#dbm-editor-panel')) return '';

        const tildaBlock = el.closest('.r.t-rec');
        if (!tildaBlock) return '';

        // 1. Определяем префикс блока
        let blockPrefix = '';
        if (this.useBlockPrefix) {
            const customClass = Array.from(tildaBlock.classList).find(c => c.startsWith('uc-'));
            blockPrefix = customClass ? `.${customClass}` : `#${tildaBlock.id}`;
        }

        // 2. Собираем полный путь от элемента до блока
        let path = [];
        let current = el;
        while (current && current !== tildaBlock && current.parentElement) {
            const part = this.getSelectorPart(current).value;
            if (part && !path.includes(part)) { // Проверяем на дубликаты
                path.unshift(part);
            }
            current = current.parentElement;
        }

        // 3. Формируем финальный селектор по вашей логике
        let finalParts = [];

        // Добавляем префикс, если нужно
        if (blockPrefix) {
            finalParts.push(blockPrefix);
        }
        
        // Логика для структуры [префикс] .t-xxx .родитель .цель
        if (path.length >= 3) {
            // Находим первый общий класс блока, например, .t-cards
            const tBlock = path.find(p => p.startsWith('.t') && !p.includes('__'));
            if (tBlock) finalParts.push(tBlock);
            
            // Добавляем предпоследний элемент (родитель), если он не совпадает с t-блоком
            if (path.length > 1 && path[path.length - 2] !== tBlock) {
                finalParts.push(path[path.length - 2]);
            }
            // Добавляем целевой элемент
            finalParts.push(path[path.length - 1]);

        } else {
            // Если путь короткий, просто добавляем все его части
            path.forEach(p => finalParts.push(p));
        }

        // Убираем дубликаты, которые могли появиться
        finalParts = [...new Set(finalParts)];

        return finalParts.join(' ').replace(/\s+/g, ' ');
    },

    getRelativeSelector(childElement, parentElement) {
       if (!childElement || !parentElement) return '';
       const parentSelector = this.getUniqueSelector(parentElement);
       const childSelector = this.getUniqueSelector(childElement);
       
       // Надежно отрезаем родительскую часть от полного селектора ребенка
       if (childSelector.startsWith(parentSelector)) {
           const relative = childSelector.substring(parentSelector.length).trim();
           // Если что-то осталось, возвращаем это. Иначе возвращаем самую последнюю часть.
           return relative || childSelector.split(' ').pop();
       }
       
       // Запасной вариант, если селекторы не вложены напрямую
       return childSelector.split(' ').pop();
    },

    getSelectorPart(el) {
        if (!el || !el.tagName) return { type: 'tag', value: '' };

        const classes = Array.from(el.classList).filter(c =>
            !this.CLASS_BLOCKLIST.includes(c) &&
            !c.startsWith('t-col_') &&
            !c.startsWith('t-prefix_') &&
            !c.startsWith('t-animate')
        );

        const parentBlock = el.closest('.r.t-rec');
        const recordType = parentBlock ? parentBlock.dataset.recordType : '';

        let bestClass = null;
        
        // Приоритет 1: Классы с двойным подчеркиванием (БЭМ модификаторы)
        bestClass = classes.find(c => c.includes('__'));
        
        // Приоритет 2: Классы, начинающиеся с 't-' (Tilda классы)
        if (!bestClass) {
            bestClass = classes.find(c => c.startsWith('t-'));
        }
        
        // Приоритет 3: Любой доступный класс
        if (!bestClass) {
            bestClass = classes[0];
        }
        
        // Приоритет 4: Поиск по data-record-type
        if (!bestClass && recordType) {
            bestClass = classes.find(c => {
                const parts = recordType.replace(/[0-9]/g, '').split('');
                return parts.some(part => c.includes(part));
            });
        }

        if (bestClass) {
            return { type: 'class', value: `.${bestClass}` };
        }

        return { type: 'tag', value: el.tagName.toLowerCase() };
    },

    buildSelectorHierarchyHTML(element, isModal = false) {
        if (!element) return '';
        const tildaBlock = element.closest('.r.t-rec');
        if (!tildaBlock) return '';
        // 1. Собираем родителей
        const parents = [];
        let currentParent = element.parentElement;
        while (currentParent && currentParent !== tildaBlock) {
            const selector = this.getUniqueSelector(currentParent);
            if (selector) {
                parents.unshift({ el: currentParent, selector }); // unshift добавляет в начало
            }
            currentParent = currentParent.parentElement;
        }
        // 2. Собираем дочерние элементы
        const children = [];
        const childElements = element.querySelectorAll('*');
        const childSelectors = new Set(); // Чтобы избежать дубликатов селекторов
        childElements.forEach(child => {
            const selector = this.getUniqueSelector(child);
            if (selector && !childSelectors.has(selector)) {
                childSelectors.add(selector);
                children.push({ el: child, selector });
            }
        });
        const createTagHTML = (item, type) => {
            const { selector } = item;
            const typeBadgeClass = type === 'target' ? 'is-target' : '';
            let typeText = 'Элемент';
            if (type === 'parent') typeText = 'Родитель';
            if (type === 'child') typeText = 'Дочерний';
            
            // Показываем очищенный селектор в UI, но сохраняем полный в data-selector
            const displaySelector = this.cleanSelectorForDisplay(selector);
            const translation = this.getTranslationForSelector(selector);
            const badge = translation ? ` <span class="dbm-translation-badge-small">${translation}</span>` : '';
            
           return `<div class="dbm-selector-tag ${typeBadgeClass}" data-selector="${selector.replace(/"/g, '&quot;')}">
                       <span class="dbm-element-type-badge">${typeText}</span> ${displaySelector}${badge}
                    </div>`;
        };
        const parentsHTML = parents.map(p => createTagHTML(p, 'parent')).join('');
        const targetHTML = createTagHTML({ el: element, selector: this.getUniqueSelector(element) }, 'target');
        const childrenHTML = children.map(c => createTagHTML(c, 'child')).join('');
        return `
           ${parents.length > 0 ? `<div class="dbm-selector-list-group">${parentsHTML}</div>` : ''}
           <div class="dbm-selector-list-group">${targetHTML}</div>
           ${children.length > 0 ? `<div class="dbm-selector-list-group">${childrenHTML}</div>` : ''}
       `;
    }
};

console.log('[SUPER-SELECTION-MANAGER] ✅ Загружен');
